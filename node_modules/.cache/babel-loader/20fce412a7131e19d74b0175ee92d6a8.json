{"ast":null,"code":"/*!\r\nFullCalendar v5.11.5\r\nDocs & License: https://fullcalendar.io/\r\n(c) 2022 Adam Shaw\r\n*/\nimport './main.css';\nimport { getUniqueDomId, getDateMeta, buildNavLinkAttrs, getDayClassNames, createElement, RenderHook, formatDayString, BaseComponent, Fragment, createFormatter, EventRoot, getSegAnchorAttrs, isMultiDayRange, buildSegTimeText, memoize, ViewRoot, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, DateComponent, startOfDay, addDays, identity, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nvar ListViewHeaderRow = /** @class */function (_super) {\n  __extends(ListViewHeaderRow, _super);\n  function ListViewHeaderRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      textId: getUniqueDomId()\n    };\n    return _this;\n  }\n  ListViewHeaderRow.prototype.render = function () {\n    var _a = this.context,\n      theme = _a.theme,\n      dateEnv = _a.dateEnv,\n      options = _a.options,\n      viewApi = _a.viewApi;\n    var _b = this.props,\n      cellId = _b.cellId,\n      dayDate = _b.dayDate,\n      todayRange = _b.todayRange;\n    var textId = this.state.textId;\n    var dayMeta = getDateMeta(dayDate, todayRange);\n    // will ever be falsy?\n    var text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';\n    // will ever be falsy? also, BAD NAME \"alt\"\n    var sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n    var hookProps = __assign({\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId: textId,\n      text: text,\n      sideText: sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false)\n    }, dayMeta);\n    var classNames = ['fc-list-day'].concat(getDayClassNames(dayMeta, theme));\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.dayHeaderClassNames,\n      content: options.dayHeaderContent,\n      defaultContent: renderInnerContent,\n      didMount: options.dayHeaderDidMount,\n      willUnmount: options.dayHeaderWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"tr\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-date\": formatDayString(dayDate)\n      }, createElement(\"th\", {\n        scope: \"colgroup\",\n        colSpan: 3,\n        id: cellId,\n        \"aria-labelledby\": textId\n      }, createElement(\"div\", {\n        className: 'fc-list-day-cushion ' + theme.getClass('tableCellShaded'),\n        ref: innerElRef\n      }, innerContent)));\n    });\n  };\n  return ListViewHeaderRow;\n}(BaseComponent);\nfunction renderInnerContent(props) {\n  return createElement(Fragment, null, props.text && createElement(\"a\", __assign({\n    id: props.textId,\n    className: \"fc-list-day-text\"\n  }, props.navLinkAttrs), props.text), props.sideText && ( /* not keyboard tabbable */createElement(\"a\", __assign({\n    \"aria-hidden\": true,\n    className: \"fc-list-day-side-text\"\n  }, props.sideNavLinkAttrs), props.sideText)));\n}\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short'\n});\nvar ListViewEventRow = /** @class */function (_super) {\n  __extends(ListViewEventRow, _super);\n  function ListViewEventRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ListViewEventRow.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var seg = props.seg,\n      timeHeaderId = props.timeHeaderId,\n      eventHeaderId = props.eventHeaderId,\n      dateHeaderId = props.dateHeaderId;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n    return createElement(EventRoot, {\n      seg: seg,\n      timeText: \"\" // BAD. because of all-day content\n      ,\n      disableDragging: true,\n      disableResizing: true,\n      defaultContent: function () {\n        return renderEventInnerContent(seg, context);\n      } /* weird */,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday,\n      isSelected: props.isSelected,\n      isDragging: props.isDragging,\n      isResizing: props.isResizing,\n      isDateSelecting: props.isDateSelecting\n    }, function (rootElRef, classNames, innerElRef, innerContent, hookProps) {\n      return createElement(\"tr\", {\n        className: ['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' '),\n        ref: rootElRef\n      }, buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId), createElement(\"td\", {\n        \"aria-hidden\": true,\n        className: \"fc-list-event-graphic\"\n      }, createElement(\"span\", {\n        className: \"fc-list-event-dot\",\n        style: {\n          borderColor: hookProps.borderColor || hookProps.backgroundColor\n        }\n      })), createElement(\"td\", {\n        ref: innerElRef,\n        headers: eventHeaderId + \" \" + dateHeaderId,\n        className: \"fc-list-event-title\"\n      }, innerContent));\n    });\n  };\n  return ListViewEventRow;\n}(BaseComponent);\nfunction renderEventInnerContent(seg, context) {\n  var interactiveAttrs = getSegAnchorAttrs(seg, context);\n  return createElement(\"a\", __assign({}, interactiveAttrs), seg.eventRange.def.title);\n}\nfunction buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {\n  var options = context.options;\n  if (options.displayEventTime !== false) {\n    var eventDef = seg.eventRange.def;\n    var eventInstance = seg.eventRange.instance;\n    var doAllDay = false;\n    var timeText = void 0;\n    if (eventDef.allDay) {\n      doAllDay = true;\n    } else if (isMultiDayRange(seg.eventRange.range)) {\n      // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n      } else {\n        doAllDay = true;\n      }\n    } else {\n      timeText = buildSegTimeText(seg, timeFormat, context);\n    }\n    if (doAllDay) {\n      var hookProps = {\n        text: context.options.allDayText,\n        view: context.viewApi\n      };\n      return createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.allDayClassNames,\n        content: options.allDayContent,\n        defaultContent: renderAllDayInner,\n        didMount: options.allDayDidMount,\n        willUnmount: options.allDayWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          headers: timeHeaderId + \" \" + dateHeaderId,\n          className: ['fc-list-event-time'].concat(classNames).join(' ')\n        }, innerContent);\n      });\n    }\n    return createElement(\"td\", {\n      className: \"fc-list-event-time\"\n    }, timeText);\n  }\n  return null;\n}\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\n\n/*\r\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\r\n*/\nvar ListView = /** @class */function (_super) {\n  __extends(ListView, _super);\n  function ListView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.computeDateVars = memoize(computeDateVars);\n    _this.eventStoreToSegs = memoize(_this._eventStoreToSegs);\n    _this.state = {\n      timeHeaderId: getUniqueDomId(),\n      eventHeaderId: getUniqueDomId(),\n      dateHeaderIdRoot: getUniqueDomId()\n    };\n    _this.setRootEl = function (rootEl) {\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    return _this;\n  }\n  ListView.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var extraClassNames = ['fc-list', context.theme.getClass('table'), context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''];\n    var _b = this.computeDateVars(props.dateProfile),\n      dayDates = _b.dayDates,\n      dayRanges = _b.dayRanges;\n    var eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.setRootEl\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(Scroller, {\n        liquid: !props.isHeightAuto,\n        overflowX: props.isHeightAuto ? 'visible' : 'hidden',\n        overflowY: props.isHeightAuto ? 'visible' : 'auto'\n      }, eventSegs.length > 0 ? _this.renderSegList(eventSegs, dayDates) : _this.renderEmptyMessage()));\n    });\n  };\n  ListView.prototype.renderEmptyMessage = function () {\n    var _a = this.context,\n      options = _a.options,\n      viewApi = _a.viewApi;\n    var hookProps = {\n      text: options.noEventsText,\n      view: viewApi\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.noEventsClassNames,\n      content: options.noEventsContent,\n      defaultContent: renderNoEventsInner,\n      didMount: options.noEventsDidMount,\n      willUnmount: options.noEventsWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        className: ['fc-list-empty'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(\"div\", {\n        className: \"fc-list-empty-cushion\",\n        ref: innerElRef\n      }, innerContent));\n    });\n  };\n  ListView.prototype.renderSegList = function (allSegs, dayDates) {\n    var _a = this.context,\n      theme = _a.theme,\n      options = _a.options;\n    var _b = this.state,\n      timeHeaderId = _b.timeHeaderId,\n      eventHeaderId = _b.eventHeaderId,\n      dateHeaderIdRoot = _b.dateHeaderIdRoot;\n    var segsByDay = groupSegsByDay(allSegs); // sparse array\n    return createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      var innerNodes = [];\n      for (var dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n        var daySegs = segsByDay[dayIndex];\n        if (daySegs) {\n          // sparse array, so might be undefined\n          var dayStr = formatDayString(dayDates[dayIndex]);\n          var dateHeaderId = dateHeaderIdRoot + '-' + dayStr;\n          // append a day header\n          innerNodes.push(createElement(ListViewHeaderRow, {\n            key: dayStr,\n            cellId: dateHeaderId,\n            dayDate: dayDates[dayIndex],\n            todayRange: todayRange\n          }));\n          daySegs = sortEventSegs(daySegs, options.eventOrder);\n          for (var _i = 0, daySegs_1 = daySegs; _i < daySegs_1.length; _i++) {\n            var seg = daySegs_1[_i];\n            innerNodes.push(createElement(ListViewEventRow, __assign({\n              key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */,\n              seg: seg,\n              isDragging: false,\n              isResizing: false,\n              isDateSelecting: false,\n              isSelected: false,\n              timeHeaderId: timeHeaderId,\n              eventHeaderId: eventHeaderId,\n              dateHeaderId: dateHeaderId\n            }, getSegMeta(seg, todayRange, nowDate))));\n          }\n        }\n      }\n      return createElement(\"table\", {\n        className: 'fc-list-table ' + theme.getClass('table')\n      }, createElement(\"thead\", null, createElement(\"tr\", null, createElement(\"th\", {\n        scope: \"col\",\n        id: timeHeaderId\n      }, options.timeHint), createElement(\"th\", {\n        scope: \"col\",\n        \"aria-hidden\": true\n      }), createElement(\"th\", {\n        scope: \"col\",\n        id: eventHeaderId\n      }, options.eventHint))), createElement(\"tbody\", null, innerNodes));\n    });\n  };\n  ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n    return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n  };\n  ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n    var segs = [];\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n    }\n    return segs;\n  };\n  ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n    var dateEnv = this.context.dateEnv;\n    var nextDayThreshold = this.context.options.nextDayThreshold;\n    var range = eventRange.range;\n    var allDay = eventRange.def.allDay;\n    var dayIndex;\n    var segRange;\n    var seg;\n    var segs = [];\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex]);\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange: eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex: dayIndex\n        };\n        segs.push(seg);\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n          seg.end = range.end;\n          seg.isEnd = true;\n          break;\n        }\n      }\n    }\n    return segs;\n  };\n  return ListView;\n}(DateComponent);\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text;\n}\nfunction computeDateVars(dateProfile) {\n  var dayStart = startOfDay(dateProfile.renderRange.start);\n  var viewEnd = dateProfile.renderRange.end;\n  var dayDates = [];\n  var dayRanges = [];\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart);\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1)\n    });\n    dayStart = addDays(dayStart, 1);\n  }\n  return {\n    dayDates: dayDates,\n    dayRanges: dayRanges\n  };\n}\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs) {\n  var segsByDay = []; // sparse array\n  var i;\n  var seg;\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n  }\n  return segsByDay;\n}\nvar OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter,\n  listDaySideFormat: createFalsableFormatter,\n  noEventsClassNames: identity,\n  noEventsContent: identity,\n  noEventsDidMount: identity,\n  noEventsWillUnmount: identity\n  // noEventsText is defined in base options\n};\nfunction createFalsableFormatter(input) {\n  return input === false ? null : createFormatter(input);\n}\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    list: {\n      component: ListView,\n      buttonTextKey: 'list',\n      listDayFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      } // like \"January 1, 2016\"\n    },\n    listDay: {\n      type: 'list',\n      duration: {\n        days: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      } // day-of-week is all we need. full date is probably in headerToolbar\n    },\n    listWeek: {\n      type: 'list',\n      duration: {\n        weeks: 1\n      },\n      listDayFormat: {\n        weekday: 'long'\n      },\n      listDaySideFormat: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    listMonth: {\n      type: 'list',\n      duration: {\n        month: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n    },\n    listYear: {\n      type: 'list',\n      duration: {\n        year: 1\n      },\n      listDaySideFormat: {\n        weekday: 'long'\n      } // day-of-week is nice-to-have\n    }\n  }\n});\nexport default main;\nexport { ListView };","map":{"version":3,"names":["ListViewHeaderRow","_super","__extends","_this","apply","arguments","state","textId","getUniqueDomId","prototype","render","_a","context","theme","dateEnv","options","viewApi","_b","props","cellId","dayDate","todayRange","dayMeta","getDateMeta","text","listDayFormat","format","sideText","listDaySideFormat","hookProps","__assign","date","toDate","view","navLinkAttrs","buildNavLinkAttrs","sideNavLinkAttrs","classNames","concat","getDayClassNames","createElement","RenderHook","dayHeaderClassNames","content","dayHeaderContent","defaultContent","renderInnerContent","didMount","dayHeaderDidMount","willUnmount","dayHeaderWillUnmount","rootElRef","customClassNames","innerElRef","innerContent","ref","className","join","formatDayString","scope","colSpan","id","getClass","BaseComponent","Fragment","DEFAULT_TIME_FORMAT","createFormatter","hour","minute","meridiem","ListViewEventRow","seg","timeHeaderId","eventHeaderId","dateHeaderId","timeFormat","eventTimeFormat","EventRoot","timeText","disableDragging","disableResizing","renderEventInnerContent","isPast","isFuture","isToday","isSelected","isDragging","isResizing","isDateSelecting","event","url","buildTimeContent","style","borderColor","backgroundColor","headers","interactiveAttrs","getSegAnchorAttrs","eventRange","def","title","displayEventTime","eventDef","eventInstance","instance","doAllDay","allDay","isMultiDayRange","range","isStart","buildSegTimeText","start","end","isEnd","allDayText","allDayClassNames","allDayContent","renderAllDayInner","allDayDidMount","allDayWillUnmount","ListView","computeDateVars","memoize","eventStoreToSegs","_eventStoreToSegs","dateHeaderIdRoot","setRootEl","rootEl","registerInteractiveComponent","el","unregisterInteractiveComponent","extraClassNames","stickyHeaderDates","dateProfile","dayDates","dayRanges","eventSegs","eventStore","eventUiBases","ViewRoot","viewSpec","elRef","Scroller","liquid","isHeightAuto","overflowX","overflowY","length","renderSegList","renderEmptyMessage","noEventsText","noEventsClassNames","noEventsContent","renderNoEventsInner","noEventsDidMount","noEventsWillUnmount","allSegs","segsByDay","groupSegsByDay","NowTimer","unit","nowDate","innerNodes","dayIndex","daySegs","dayStr","push","key","sortEventSegs","eventOrder","_i","daySegs_1","instanceId","getSegMeta","timeHint","eventHint","eventRangesToSegs","sliceEventStore","activeRange","nextDayThreshold","fg","eventRanges","segs","eventRanges_1","eventRangeToSegs","segRange","intersectRanges","component","valueOf","add","DateComponent","dayStart","startOfDay","renderRange","viewEnd","addDays","i","OPTION_REFINERS","createFalsableFormatter","identity","input","main","createPlugin","optionRefiners","views","list","buttonTextKey","month","day","year","listDay","type","duration","days","weekday","listWeek","weeks","listMonth","listYear"],"sources":["src/ListViewHeaderRow.tsx","src/ListViewEventRow.tsx","src/ListView.tsx","src/options.ts","src/main.ts"],"sourcesContent":["import {\n  BaseComponent, DateMarker, createElement, DateRange, getDateMeta,\n  RenderHook, DayHeaderContentArg, getDayClassNames, formatDayString, Fragment, buildNavLinkAttrs, getUniqueDomId,\n} from '@fullcalendar/common'\n\nexport interface ListViewHeaderRowProps {\n  cellId: string\n  dayDate: DateMarker\n  todayRange: DateRange\n}\n\ninterface HookProps extends DayHeaderContentArg { // doesn't enforce much since DayCellContentArg allow extra props\n  textId: string // for aria-labelledby\n  text: string\n  sideText: string\n}\n\nexport class ListViewHeaderRow extends BaseComponent<ListViewHeaderRowProps> {\n  state = {\n    textId: getUniqueDomId(),\n  }\n\n  render() {\n    let { theme, dateEnv, options, viewApi } = this.context\n    let { cellId, dayDate, todayRange } = this.props\n    let { textId } = this.state\n    let dayMeta = getDateMeta(dayDate, todayRange)\n\n    // will ever be falsy?\n    let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : ''\n\n    // will ever be falsy? also, BAD NAME \"alt\"\n    let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : ''\n\n    let hookProps: HookProps = {\n      date: dateEnv.toDate(dayDate),\n      view: viewApi,\n      textId,\n      text,\n      sideText,\n      navLinkAttrs: buildNavLinkAttrs(this.context, dayDate),\n      sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false),\n      ...dayMeta,\n    }\n\n    let classNames = ['fc-list-day'].concat(\n      getDayClassNames(dayMeta, theme),\n    )\n\n    // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n    return (\n      <RenderHook<HookProps>\n        hookProps={hookProps}\n        classNames={options.dayHeaderClassNames}\n        content={options.dayHeaderContent}\n        defaultContent={renderInnerContent}\n        didMount={options.dayHeaderDidMount}\n        willUnmount={options.dayHeaderWillUnmount}\n      >\n        {(rootElRef, customClassNames, innerElRef, innerContent) => (\n          <tr\n            ref={rootElRef}\n            className={classNames.concat(customClassNames).join(' ')}\n            data-date={formatDayString(dayDate)}\n          >\n            {/* TODO: force-hide top border based on :first-child */}\n            <th scope=\"colgroup\" colSpan={3} id={cellId} aria-labelledby={textId}>\n              <div className={'fc-list-day-cushion ' + theme.getClass('tableCellShaded')} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </th>\n          </tr>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderInnerContent(props: HookProps) {\n  return (\n    <Fragment>\n      {props.text && (\n        <a id={props.textId} className=\"fc-list-day-text\" {...props.navLinkAttrs}>\n          {props.text}\n        </a>\n      )}\n      {props.sideText && (/* not keyboard tabbable */\n        <a aria-hidden className=\"fc-list-day-side-text\" {...props.sideNavLinkAttrs}>\n          {props.sideText}\n        </a>\n      )}\n    </Fragment>\n  )\n}\n","import {\n  MinimalEventProps, BaseComponent, ViewContext, createElement, AllDayContentArg,\n  Seg, isMultiDayRange, DateFormatter, buildSegTimeText, createFormatter, EventRoot, ComponentChildren, RenderHook, getSegAnchorAttrs,\n} from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: 'short',\n})\n\nexport interface ListViewEventRowProps extends MinimalEventProps {\n  timeHeaderId: string\n  eventHeaderId: string\n  dateHeaderId: string\n}\n\nexport class ListViewEventRow extends BaseComponent<ListViewEventRowProps> {\n  render() {\n    let { props, context } = this\n    let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TIME_FORMAT\n\n    return (\n      <EventRoot\n        seg={seg}\n        timeText=\"\" // BAD. because of all-day content\n        disableDragging\n        disableResizing\n        defaultContent={() => renderEventInnerContent(seg, context) /* weird */}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n        isSelected={props.isSelected}\n        isDragging={props.isDragging}\n        isResizing={props.isResizing}\n        isDateSelecting={props.isDateSelecting}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, hookProps) => (\n          <tr className={['fc-list-event', hookProps.event.url ? 'fc-event-forced-url' : ''].concat(classNames).join(' ')} ref={rootElRef}>\n            {buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId)}\n            <td aria-hidden className=\"fc-list-event-graphic\">\n              <span className=\"fc-list-event-dot\" style={{ borderColor: hookProps.borderColor || hookProps.backgroundColor }} />\n            </td>\n            <td ref={innerElRef} headers={`${eventHeaderId} ${dateHeaderId}`} className=\"fc-list-event-title\">\n              {innerContent}\n            </td>\n          </tr>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderEventInnerContent(seg: Seg, context: ViewContext) {\n  let interactiveAttrs = getSegAnchorAttrs(seg, context)\n  return (\n    <a {...interactiveAttrs}>\n      {/* TODO: document how whole row become clickable */}\n      {seg.eventRange.def.title}\n    </a>\n  )\n}\n\nfunction buildTimeContent(\n  seg: Seg,\n  timeFormat: DateFormatter,\n  context: ViewContext,\n  timeHeaderId: string,\n  dateHeaderId: string,\n): ComponentChildren {\n  let { options } = context\n\n  if (options.displayEventTime !== false) {\n    let eventDef = seg.eventRange.def\n    let eventInstance = seg.eventRange.instance\n    let doAllDay = false\n    let timeText: string\n\n    if (eventDef.allDay) {\n      doAllDay = true\n    } else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n      if (seg.isStart) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          eventInstance.range.start,\n          seg.end,\n        )\n      } else if (seg.isEnd) {\n        timeText = buildSegTimeText(\n          seg,\n          timeFormat,\n          context,\n          null,\n          null,\n          seg.start,\n          eventInstance.range.end,\n        )\n      } else {\n        doAllDay = true\n      }\n    } else {\n      timeText = buildSegTimeText(\n        seg,\n        timeFormat,\n        context,\n      )\n    }\n\n    if (doAllDay) {\n      let hookProps: AllDayContentArg = {\n        text: context.options.allDayText,\n        view: context.viewApi,\n      }\n\n      return (\n        <RenderHook<AllDayContentArg> // needed?\n          hookProps={hookProps}\n          classNames={options.allDayClassNames}\n          content={options.allDayContent}\n          defaultContent={renderAllDayInner}\n          didMount={options.allDayDidMount}\n          willUnmount={options.allDayWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td ref={rootElRef} headers={`${timeHeaderId} ${dateHeaderId}`} className={['fc-list-event-time'].concat(classNames).join(' ')}>\n              {innerContent}\n            </td>\n          )}\n        </RenderHook>\n      )\n    }\n\n    return (\n      <td className=\"fc-list-event-time\">\n        {timeText}\n      </td>\n    )\n  }\n\n  return null\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  createElement,\n  ViewProps,\n  Scroller,\n  DateMarker,\n  addDays,\n  startOfDay,\n  DateRange,\n  intersectRanges,\n  DateProfile,\n  EventUiHash,\n  EventRenderRange,\n  sliceEventStore,\n  EventStore,\n  memoize,\n  Seg,\n  VNode,\n  sortEventSegs,\n  getSegMeta,\n  NowTimer,\n  ViewRoot,\n  RenderHook,\n  DateComponent,\n  ViewApi,\n  MountArg,\n  getUniqueDomId,\n  formatDayString,\n} from '@fullcalendar/common'\nimport { ListViewHeaderRow } from './ListViewHeaderRow'\nimport { ListViewEventRow } from './ListViewEventRow'\n\nexport interface NoEventsContentArg {\n  text: string\n  view: ViewApi\n}\n\nexport type NoEventsMountArg = MountArg<NoEventsContentArg>\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nexport class ListView extends DateComponent<ViewProps> {\n  private computeDateVars = memoize(computeDateVars)\n  private eventStoreToSegs = memoize(this._eventStoreToSegs)\n  state = {\n    timeHeaderId: getUniqueDomId(),\n    eventHeaderId: getUniqueDomId(),\n    dateHeaderIdRoot: getUniqueDomId(),\n  }\n\n  render() {\n    let { props, context } = this\n\n    let extraClassNames = [\n      'fc-list',\n      context.theme.getClass('table'), // just for the outer border. will be on div\n      context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : '',\n    ]\n\n    let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile)\n    let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges)\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.setRootEl}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <Scroller\n              liquid={!props.isHeightAuto}\n              overflowX={props.isHeightAuto ? 'visible' : 'hidden'}\n              overflowY={props.isHeightAuto ? 'visible' : 'auto'}\n            >\n              {eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage()}\n            </Scroller>\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  setRootEl = (rootEl: HTMLDivElement | null) => {\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, { // TODO: make aware that it doesn't do Hits\n        el: rootEl,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  renderEmptyMessage() {\n    let { options, viewApi } = this.context\n    let hookProps: NoEventsContentArg = {\n      text: options.noEventsText,\n      view: viewApi,\n    }\n\n    return (\n      <RenderHook<NoEventsContentArg> // needed???\n        hookProps={hookProps}\n        classNames={options.noEventsClassNames}\n        content={options.noEventsContent}\n        defaultContent={renderNoEventsInner}\n        didMount={options.noEventsDidMount}\n        willUnmount={options.noEventsWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div className={['fc-list-empty'].concat(classNames).join(' ')} ref={rootElRef}>\n            <div className=\"fc-list-empty-cushion\" ref={innerElRef}>\n              {innerContent}\n            </div>\n          </div>\n        )}\n      </RenderHook>\n    )\n  }\n\n  renderSegList(allSegs: Seg[], dayDates: DateMarker[]) {\n    let { theme, options } = this.context\n    let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state\n    let segsByDay = groupSegsByDay(allSegs) // sparse array\n\n    return (\n      <NowTimer unit=\"day\">\n        {(nowDate: DateMarker, todayRange: DateRange) => {\n          let innerNodes: VNode[] = []\n\n          for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n            let daySegs = segsByDay[dayIndex]\n\n            if (daySegs) { // sparse array, so might be undefined\n              let dayStr = formatDayString(dayDates[dayIndex])\n              let dateHeaderId = dateHeaderIdRoot + '-' + dayStr\n\n              // append a day header\n              innerNodes.push(\n                <ListViewHeaderRow\n                  key={dayStr}\n                  cellId={dateHeaderId}\n                  dayDate={dayDates[dayIndex]}\n                  todayRange={todayRange}\n                />,\n              )\n\n              daySegs = sortEventSegs(daySegs, options.eventOrder)\n\n              for (let seg of daySegs) {\n                innerNodes.push(\n                  <ListViewEventRow\n                    key={dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */}\n                    seg={seg}\n                    isDragging={false}\n                    isResizing={false}\n                    isDateSelecting={false}\n                    isSelected={false}\n                    timeHeaderId={timeHeaderId}\n                    eventHeaderId={eventHeaderId}\n                    dateHeaderId={dateHeaderId}\n                    {...getSegMeta(seg, todayRange, nowDate)}\n                  />,\n                )\n              }\n            }\n          }\n\n          return (\n            <table className={'fc-list-table ' + theme.getClass('table')}>\n              <thead>\n                <tr>\n                  <th scope=\"col\" id={timeHeaderId}>{options.timeHint}</th>\n                  <th scope=\"col\" aria-hidden />\n                  <th scope=\"col\" id={eventHeaderId}>{options.eventHint}</th>\n                </tr>\n              </thead>\n              <tbody>{innerNodes}</tbody>\n            </table>\n          )\n        }}\n      </NowTimer>\n    )\n  }\n\n  _eventStoreToSegs(eventStore: EventStore, eventUiBases: EventUiHash, dayRanges: DateRange[]): Seg[] {\n    return this.eventRangesToSegs(\n      sliceEventStore(\n        eventStore,\n        eventUiBases,\n        this.props.dateProfile.activeRange,\n        this.context.options.nextDayThreshold,\n      ).fg,\n      dayRanges,\n    )\n  }\n\n  eventRangesToSegs(eventRanges: EventRenderRange[], dayRanges: DateRange[]) {\n    let segs = []\n\n    for (let eventRange of eventRanges) {\n      segs.push(...this.eventRangeToSegs(eventRange, dayRanges))\n    }\n\n    return segs\n  }\n\n  eventRangeToSegs(eventRange: EventRenderRange, dayRanges: DateRange[]) {\n    let { dateEnv } = this.context\n    let { nextDayThreshold } = this.context.options\n    let range = eventRange.range\n    let allDay = eventRange.def.allDay\n    let dayIndex\n    let segRange\n    let seg\n    let segs = []\n\n    for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n      segRange = intersectRanges(range, dayRanges[dayIndex])\n\n      if (segRange) {\n        seg = {\n          component: this,\n          eventRange,\n          start: segRange.start,\n          end: segRange.end,\n          isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n          dayIndex,\n        }\n\n        segs.push(seg)\n\n        // detect when range won't go fully into the next day,\n        // and mutate the latest seg to the be the end.\n        if (\n          !seg.isEnd && !allDay &&\n          dayIndex + 1 < dayRanges.length &&\n          range.end <\n            dateEnv.add(\n              dayRanges[dayIndex + 1].start,\n              nextDayThreshold,\n            )\n        ) {\n          seg.end = range.end\n          seg.isEnd = true\n          break\n        }\n      }\n    }\n\n    return segs\n  }\n}\n\nfunction renderNoEventsInner(hookProps) {\n  return hookProps.text\n}\n\nfunction computeDateVars(dateProfile: DateProfile) {\n  let dayStart = startOfDay(dateProfile.renderRange.start)\n  let viewEnd = dateProfile.renderRange.end\n  let dayDates: DateMarker[] = []\n  let dayRanges: DateRange[] = []\n\n  while (dayStart < viewEnd) {\n    dayDates.push(dayStart)\n\n    dayRanges.push({\n      start: dayStart,\n      end: addDays(dayStart, 1),\n    })\n\n    dayStart = addDays(dayStart, 1)\n  }\n\n  return { dayDates, dayRanges }\n}\n\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs): Seg[][] {\n  let segsByDay = [] // sparse array\n  let i\n  let seg\n\n  for (i = 0; i < segs.length; i += 1) {\n    seg = segs[i];\n    (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n      .push(seg)\n  }\n\n  return segsByDay\n}\n","import {\n  identity,\n  Identity,\n  ClassNamesGenerator,\n  CustomContentGenerator,\n  DidMountHandler,\n  WillUnmountHandler,\n  createFormatter,\n  FormatterInput,\n} from '@fullcalendar/common'\n\n// public\nimport {\n  NoEventsContentArg,\n  NoEventsMountArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  listDayFormat: createFalsableFormatter, // defaults specified in list plugins\n  listDaySideFormat: createFalsableFormatter, // \"\n\n  noEventsClassNames: identity as Identity<ClassNamesGenerator<NoEventsContentArg>>,\n  noEventsContent: identity as Identity<CustomContentGenerator<NoEventsContentArg>>,\n  noEventsDidMount: identity as Identity<DidMountHandler<NoEventsMountArg>>,\n  noEventsWillUnmount: identity as Identity<WillUnmountHandler<NoEventsMountArg>>,\n\n  // noEventsText is defined in base options\n}\n\nfunction createFalsableFormatter(input: FormatterInput | false) {\n  return input === false ? null : createFormatter(input)\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { ListView } from './ListView'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { ListView }\nexport * from './api-type-deps'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    list: {\n      component: ListView,\n      buttonTextKey: 'list', // what to lookup in locale files\n      listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n    },\n\n    listDay: {\n      type: 'list',\n      duration: { days: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n    },\n\n    listWeek: {\n      type: 'list',\n      duration: { weeks: 1 },\n      listDayFormat: { weekday: 'long' }, // day-of-week is more important\n      listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    },\n\n    listMonth: {\n      type: 'list',\n      duration: { month: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n    listYear: {\n      type: 'list',\n      duration: { year: 1 },\n      listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n    },\n\n  },\n})\n"],"mappings":";;;;;;;;AAiBA,IAAAA,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAAvC,SAAAD,kBAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IACEF,KAAA,CAAAG,KAAK,GAAG;MACNC,MAAM,EAAEC,cAAc;KACvB;;;EAEDR,iBAAA,CAAAS,SAAA,CAAAC,MAAM,GAAN;IACM,IAAAC,EAAA,GAAuC,IAAI,CAACC,OAAO;MAAjDC,KAAK,GAAAF,EAAA,CAAAE,KAAA;MAAEC,OAAO,GAAAH,EAAA,CAAAG,OAAA;MAAEC,OAAO,GAAAJ,EAAA,CAAAI,OAAA;MAAEC,OAAO,GAAAL,EAAA,CAAAK,OAAiB;IACnD,IAAAC,EAAA,GAAkC,IAAI,CAACC,KAAK;MAA1CC,MAAM,GAAAF,EAAA,CAAAE,MAAA;MAAEC,OAAO,GAAAH,EAAA,CAAAG,OAAA;MAAEC,UAAU,GAAAJ,EAAA,CAAAI,UAAe;IAC1C,IAAAd,MAAM,GAAK,IAAI,CAACD,KAAK,CAAAC,MAAf;IACZ,IAAIe,OAAO,GAAGC,WAAW,CAACH,OAAO,EAAEC,UAAU,CAAC;;IAG9C,IAAIG,IAAI,GAAGT,OAAO,CAACU,aAAa,GAAGX,OAAO,CAACY,MAAM,CAACN,OAAO,EAAEL,OAAO,CAACU,aAAa,CAAC,GAAG,EAAE;;IAGtF,IAAIE,QAAQ,GAAGZ,OAAO,CAACa,iBAAiB,GAAGd,OAAO,CAACY,MAAM,CAACN,OAAO,EAAEL,OAAO,CAACa,iBAAiB,CAAC,GAAG,EAAE;IAElG,IAAIC,SAAS,GAAAC,QAAA;MACXC,IAAI,EAAEjB,OAAO,CAACkB,MAAM,CAACZ,OAAO,CAAC;MAC7Ba,IAAI,EAAEjB,OAAO;MACbT,MAAM,EAAAA,MAAA;MACNiB,IAAI,EAAAA,IAAA;MACJG,QAAQ,EAAAA,QAAA;MACRO,YAAY,EAAEC,iBAAiB,CAAC,IAAI,CAACvB,OAAO,EAAEQ,OAAO,CAAC;MACtDgB,gBAAgB,EAAED,iBAAiB,CAAC,IAAI,CAACvB,OAAO,EAAEQ,OAAO,EAAE,KAAK,EAAE,KAAK;IAAC,GACrEE,OAAO,CACX;IAED,IAAIe,UAAU,GAAG,CAAC,aAAa,CAAC,CAACC,MAAM,CACrCC,gBAAgB,CAACjB,OAAO,EAAET,KAAK,CAAC,CACjC;;IAGD,OACE2B,aAAA,CAACC,UAAU;MACTZ,SAAS,EAAEA,SAAS;MACpBQ,UAAU,EAAEtB,OAAO,CAAC2B,mBAAmB;MACvCC,OAAO,EAAE5B,OAAO,CAAC6B,gBAAgB;MACjCC,cAAc,EAAEC,kBAAkB;MAClCC,QAAQ,EAAEhC,OAAO,CAACiC,iBAAiB;MACnCC,WAAW,EAAElC,OAAO,CAACmC;IAAoB,GAExC,UAACC,SAAS,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,YAAY;MAAK,OAC1Dd,aAAA;QACEe,GAAG,EAAEJ,SAAS;QACdK,SAAS,EAAEnB,UAAU,CAACC,MAAM,CAACc,gBAAgB,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;QAAA,aAC7CC,eAAe,CAACtC,OAAO;MAAC,GAGnCoB,aAAA;QAAImB,KAAK,EAAC,UAAU;QAACC,OAAO,EAAE,CAAC;QAAEC,EAAE,EAAE1C,MAAM;QAAA,mBAAmBZ;MAAM,GAClEiC,aAAA;QAAKgB,SAAS,EAAE,sBAAsB,GAAG3C,KAAK,CAACiD,QAAQ,CAAC,iBAAiB,CAAC;QAAEP,GAAG,EAAEF;MAAU,GACxFC,YAAY,CACT,CACH,CACF;IAAA,CACN,CACU;GAEhB;EACH,OAAAtD,iBAAC;AAAD,CA3DA,CAAuC+D,aAAa;AA6DpD,SAASjB,kBAAkBA,CAAC5B,KAAgB;EAC1C,OACEsB,aAAA,CAACwB,QAAQ,QACN9C,KAAK,CAACM,IAAI,IACTgB,aAAA,MAAAV,QAAA;IAAG+B,EAAE,EAAE3C,KAAK,CAACX,MAAM;IAAEiD,SAAS,EAAC;EAAkB,GAAKtC,KAAK,CAACgB,YAAY,GACrEhB,KAAK,CAACM,IAAI,CAEd,EACAN,KAAK,CAACS,QAAQ,iCACba,aAAA,MAAAV,QAAA;IAAA;IAAe0B,SAAS,EAAC;EAAuB,GAAKtC,KAAK,CAACkB,gBAAgB,GACxElB,KAAK,CAACS,QAAQ,CACb,CACL,CACQ;AAEf;ACxFA,IAAMsC,mBAAmB,GAAGC,eAAe,CAAC;EAC1CC,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,SAAS;EACjBC,QAAQ,EAAE;CACX,CAAC;AAQF,IAAAC,gBAAA,0BAAArE,MAAA;EAAsCC,SAAA,CAAAoE,gBAAA,EAAArE,MAAA;EAAtC,SAAAqE,iBAAA;;;EACEA,gBAAA,CAAA7D,SAAA,CAAAC,MAAM,GAAN;IACM,IAAAC,EAAA,GAAqB,IAAI;MAAvBO,KAAK,GAAAP,EAAA,CAAAO,KAAA;MAAEN,OAAO,GAAAD,EAAA,CAAAC,OAAS;IACvB,IAAA2D,GAAG,GAAgDrD,KAAK,CAAAqD,GAArD;MAAEC,YAAY,GAAkCtD,KAAK,CAAAsD,YAAvC;MAAEC,aAAa,GAAmBvD,KAAK,CAAAuD,aAAxB;MAAEC,YAAY,GAAKxD,KAAK,CAAAwD,YAAV;IACpD,IAAIC,UAAU,GAAG/D,OAAO,CAACG,OAAO,CAAC6D,eAAe,IAAIX,mBAAmB;IAEvE,OACEzB,aAAA,CAACqC,SAAS;MACRN,GAAG,EAAEA,GAAG;MACRO,QAAQ,EAAC,EAAE;MAAA;MACXC,eAAe;MACfC,eAAe;MACfnC,cAAc,EAAE,SAAAA,CAAA;QAAM,OAAAoC,uBAAuB,CAACV,GAAG,EAAE3D,OAAO,CAAC;MAAA;MAC3DsE,MAAM,EAAEhE,KAAK,CAACgE,MAAM;MACpBC,QAAQ,EAAEjE,KAAK,CAACiE,QAAQ;MACxBC,OAAO,EAAElE,KAAK,CAACkE,OAAO;MACtBC,UAAU,EAAEnE,KAAK,CAACmE,UAAU;MAC5BC,UAAU,EAAEpE,KAAK,CAACoE,UAAU;MAC5BC,UAAU,EAAErE,KAAK,CAACqE,UAAU;MAC5BC,eAAe,EAAEtE,KAAK,CAACsE;IAAe,GAErC,UAACrC,SAAS,EAAEd,UAAU,EAAEgB,UAAU,EAAEC,YAAY,EAAEzB,SAAS;MAAK,OAC/DW,aAAA;QAAIgB,SAAS,EAAE,CAAC,eAAe,EAAE3B,SAAS,CAAC4D,KAAK,CAACC,GAAG,GAAG,qBAAqB,GAAG,EAAE,CAAC,CAACpD,MAAM,CAACD,UAAU,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;QAAEF,GAAG,EAAEJ;MAAS,GAC5HwC,gBAAgB,CAACpB,GAAG,EAAEI,UAAU,EAAE/D,OAAO,EAAE4D,YAAY,EAAEE,YAAY,CAAC,EACvElC,aAAA;QAAA;QAAgBgB,SAAS,EAAC;MAAuB,GAC/ChB,aAAA;QAAMgB,SAAS,EAAC,mBAAmB;QAACoC,KAAK,EAAE;UAAEC,WAAW,EAAEhE,SAAS,CAACgE,WAAW,IAAIhE,SAAS,CAACiE;QAAe;MAAE,EAAI,CAC/G,EACLtD,aAAA;QAAIe,GAAG,EAAEF,UAAU;QAAE0C,OAAO,EAAKtB,aAAa,SAAIC,YAAc;QAAElB,SAAS,EAAC;MAAqB,GAC9FF,YAAY,CACV,CACF;IAAA,CACN,CACS;GAEf;EACH,OAAAgB,gBAAC;AAAD,CAnCA,CAAsCP,aAAa;AAqCnD,SAASkB,uBAAuBA,CAACV,GAAQ,EAAE3D,OAAoB;EAC7D,IAAIoF,gBAAgB,GAAGC,iBAAiB,CAAC1B,GAAG,EAAE3D,OAAO,CAAC;EACtD,OACE4B,aAAA,MAAAV,QAAA,KAAOkE,gBAAgB,GAEpBzB,GAAG,CAAC2B,UAAU,CAACC,GAAG,CAACC,KAAK,CACvB;AAER;AAEA,SAAST,gBAAgBA,CACvBpB,GAAQ,EACRI,UAAyB,EACzB/D,OAAoB,EACpB4D,YAAoB,EACpBE,YAAoB;EAEd,IAAA3D,OAAO,GAAKH,OAAO,CAAAG,OAAZ;EAEb,IAAIA,OAAO,CAACsF,gBAAgB,KAAK,KAAK,EAAE;IACtC,IAAIC,QAAQ,GAAG/B,GAAG,CAAC2B,UAAU,CAACC,GAAG;IACjC,IAAII,aAAa,GAAGhC,GAAG,CAAC2B,UAAU,CAACM,QAAQ;IAC3C,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAI3B,QAAQ,SAAQ;IAEpB,IAAIwB,QAAQ,CAACI,MAAM,EAAE;MACnBD,QAAQ,GAAG,IAAI;KAChB,MAAM,IAAIE,eAAe,CAACpC,GAAG,CAAC2B,UAAU,CAACU,KAAK,CAAC,EAAE;MAAA;MAChD,IAAIrC,GAAG,CAACsC,OAAO,EAAE;QACf/B,QAAQ,GAAGgC,gBAAgB,CACzBvC,GAAG,EACHI,UAAU,EACV/D,OAAO,EACP,IAAI,EACJ,IAAI,EACJ2F,aAAa,CAACK,KAAK,CAACG,KAAK,EACzBxC,GAAG,CAACyC,GAAG,CACR;OACF,MAAM,IAAIzC,GAAG,CAAC0C,KAAK,EAAE;QACpBnC,QAAQ,GAAGgC,gBAAgB,CACzBvC,GAAG,EACHI,UAAU,EACV/D,OAAO,EACP,IAAI,EACJ,IAAI,EACJ2D,GAAG,CAACwC,KAAK,EACTR,aAAa,CAACK,KAAK,CAACI,GAAG,CACxB;OACF,MAAM;QACLP,QAAQ,GAAG,IAAI;;KAElB,MAAM;MACL3B,QAAQ,GAAGgC,gBAAgB,CACzBvC,GAAG,EACHI,UAAU,EACV/D,OAAO,CACR;;IAGH,IAAI6F,QAAQ,EAAE;MACZ,IAAI5E,SAAS,GAAqB;QAChCL,IAAI,EAAEZ,OAAO,CAACG,OAAO,CAACmG,UAAU;QAChCjF,IAAI,EAAErB,OAAO,CAACI;OACf;MAED,OACEwB,aAAA,CAACC,UAAU;QACTZ,SAAS,EAAEA,SAAS;QACpBQ,UAAU,EAAEtB,OAAO,CAACoG,gBAAgB;QACpCxE,OAAO,EAAE5B,OAAO,CAACqG,aAAa;QAC9BvE,cAAc,EAAEwE,iBAAiB;QACjCtE,QAAQ,EAAEhC,OAAO,CAACuG,cAAc;QAChCrE,WAAW,EAAElC,OAAO,CAACwG;MAAiB,GAErC,UAACpE,SAAS,EAAEd,UAAU,EAAEgB,UAAU,EAAEC,YAAY;QAAK,OACpDd,aAAA;UAAIe,GAAG,EAAEJ,SAAS;UAAE4C,OAAO,EAAKvB,YAAY,SAAIE,YAAc;UAAElB,SAAS,EAAE,CAAC,oBAAoB,CAAC,CAAClB,MAAM,CAACD,UAAU,CAAC,CAACoB,IAAI,CAAC,GAAG;QAAC,GAC3HH,YAAY,CACV;MAAA,CACN,CACU;;IAIjB,OACEd,aAAA;MAAIgB,SAAS,EAAC;IAAoB,GAC/BsB,QAAQ,CACN;;EAIT,OAAO,IAAI;AACb;AAEA,SAASuC,iBAAiBA,CAACxF,SAAS;EAClC,OAAOA,SAAS,CAACL,IAAI;AACvB;;AC/GA;;;;EAG8BtB,SAAA,CAAAsH,QAAA,EAAAvH,MAAA;EAA9B,SAAAuH,SAAA;IAAA,IAAArH,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IACUF,KAAA,CAAAsH,eAAe,GAAGC,OAAO,CAACD,eAAe,CAAC;IAC1CtH,KAAA,CAAAwH,gBAAgB,GAAGD,OAAO,CAACvH,KAAI,CAACyH,iBAAiB,CAAC;IAC1DzH,KAAA,CAAAG,KAAK,GAAG;MACNkE,YAAY,EAAEhE,cAAc,EAAE;MAC9BiE,aAAa,EAAEjE,cAAc,EAAE;MAC/BqH,gBAAgB,EAAErH,cAAc;KACjC;IAiCDL,KAAA,CAAA2H,SAAS,GAAG,UAACC,MAA6B;MACxC,IAAIA,MAAM,EAAE;QACV5H,KAAI,CAACS,OAAO,CAACoH,4BAA4B,CAAC7H,KAAI,EAAE;UAC9C8H,EAAE,EAAEF;SACL,CAAC;OACH,MAAM;QACL5H,KAAI,CAACS,OAAO,CAACsH,8BAA8B,CAAC/H,KAAI,CAAC;;KAEpD;;;EAvCDqH,QAAA,CAAA/G,SAAA,CAAAC,MAAM,GAAN;IAAA,IAAAP,KAAA;IACM,IAAAQ,EAAA,GAAqB,IAAI;MAAvBO,KAAK,GAAAP,EAAA,CAAAO,KAAA;MAAEN,OAAO,GAAAD,EAAA,CAAAC,OAAS;IAE7B,IAAIuH,eAAe,GAAG,CACpB,SAAS,EACTvH,OAAO,CAACC,KAAK,CAACiD,QAAQ,CAAC,OAAO,CAAC,EAC/BlD,OAAO,CAACG,OAAO,CAACqH,iBAAiB,KAAK,KAAK,GAAG,gBAAgB,GAAG,EAAE,CACpE;IAEG,IAAAnH,EAAA,GAA0B,IAAI,CAACwG,eAAe,CAACvG,KAAK,CAACmH,WAAW,CAAC;MAA/DC,QAAQ,GAAArH,EAAA,CAAAqH,QAAA;MAAEC,SAAS,GAAAtH,EAAA,CAAAsH,SAA4C;IACrE,IAAIC,SAAS,GAAG,IAAI,CAACb,gBAAgB,CAACzG,KAAK,CAACuH,UAAU,EAAEvH,KAAK,CAACwH,YAAY,EAAEH,SAAS,CAAC;IAEtF,OACE/F,aAAA,CAACmG,QAAQ;MAACC,QAAQ,EAAEhI,OAAO,CAACgI,QAAQ;MAAEC,KAAK,EAAE,IAAI,CAACf;IAAS,GACxD,UAAC3E,SAAS,EAAEd,UAAU;MAAK,OAC1BG,aAAA;QAAKe,GAAG,EAAEJ,SAAS;QAAEK,SAAS,EAAE2E,eAAe,CAAC7F,MAAM,CAACD,UAAU,CAAC,CAACoB,IAAI,CAAC,GAAG;MAAC,GAC1EjB,aAAA,CAACsG,QAAQ;QACPC,MAAM,EAAE,CAAC7H,KAAK,CAAC8H,YAAY;QAC3BC,SAAS,EAAE/H,KAAK,CAAC8H,YAAY,GAAG,SAAS,GAAG,QAAQ;QACpDE,SAAS,EAAEhI,KAAK,CAAC8H,YAAY,GAAG,SAAS,GAAG;MAAM,GAEjDR,SAAS,CAACW,MAAM,GAAG,CAAC,GACnBhJ,KAAI,CAACiJ,aAAa,CAACZ,SAAS,EAAEF,QAAQ,CAAC,GACvCnI,KAAI,CAACkJ,kBAAkB,EAAE,CAClB,CACP;IAAA,CACP,CACQ;GAEd;EAYD7B,QAAA,CAAA/G,SAAA,CAAA4I,kBAAkB,GAAlB;IACM,IAAA1I,EAAA,GAAuB,IAAI,CAACC,OAAO;MAAjCG,OAAO,GAAAJ,EAAA,CAAAI,OAAA;MAAEC,OAAO,GAAAL,EAAA,CAAAK,OAAiB;IACvC,IAAIa,SAAS,GAAuB;MAClCL,IAAI,EAAET,OAAO,CAACuI,YAAY;MAC1BrH,IAAI,EAAEjB;KACP;IAED,OACEwB,aAAA,CAACC,UAAU;MACTZ,SAAS,EAAEA,SAAS;MACpBQ,UAAU,EAAEtB,OAAO,CAACwI,kBAAkB;MACtC5G,OAAO,EAAE5B,OAAO,CAACyI,eAAe;MAChC3G,cAAc,EAAE4G,mBAAmB;MACnC1G,QAAQ,EAAEhC,OAAO,CAAC2I,gBAAgB;MAClCzG,WAAW,EAAElC,OAAO,CAAC4I;IAAmB,GAEvC,UAACxG,SAAS,EAAEd,UAAU,EAAEgB,UAAU,EAAEC,YAAY;MAAK,OACpDd,aAAA;QAAKgB,SAAS,EAAE,CAAC,eAAe,CAAC,CAAClB,MAAM,CAACD,UAAU,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;QAAEF,GAAG,EAAEJ;MAAS,GAC5EX,aAAA;QAAKgB,SAAS,EAAC,uBAAuB;QAACD,GAAG,EAAEF;MAAU,GACnDC,YAAY,CACT,CACF;IAAA,CACP,CACU;GAEhB;EAEDkE,QAAA,CAAA/G,SAAA,CAAA2I,aAAa,GAAb,UAAcQ,OAAc,EAAEtB,QAAsB;IAC9C,IAAA3H,EAAA,GAAqB,IAAI,CAACC,OAAO;MAA/BC,KAAK,GAAAF,EAAA,CAAAE,KAAA;MAAEE,OAAO,GAAAJ,EAAA,CAAAI,OAAiB;IACjC,IAAAE,EAAA,GAAoD,IAAI,CAACX,KAAK;MAA5DkE,YAAY,GAAAvD,EAAA,CAAAuD,YAAA;MAAEC,aAAa,GAAAxD,EAAA,CAAAwD,aAAA;MAAEoD,gBAAgB,GAAA5G,EAAA,CAAA4G,gBAAe;IAClE,IAAIgC,SAAS,GAAGC,cAAc,CAACF,OAAO,CAAC;IAEvC,OACEpH,aAAA,CAACuH,QAAQ;MAACC,IAAI,EAAC;IAAK,GACjB,UAACC,OAAmB,EAAE5I,UAAqB;MAC1C,IAAI6I,UAAU,GAAY,EAAE;MAE5B,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGN,SAAS,CAACV,MAAM,EAAEgB,QAAQ,IAAI,CAAC,EAAE;QACjE,IAAIC,OAAO,GAAGP,SAAS,CAACM,QAAQ,CAAC;QAEjC,IAAIC,OAAO,EAAE;UAAA;UACX,IAAIC,MAAM,GAAG3G,eAAe,CAAC4E,QAAQ,CAAC6B,QAAQ,CAAC,CAAC;UAChD,IAAIzF,YAAY,GAAGmD,gBAAgB,GAAG,GAAG,GAAGwC,MAAM;;UAGlDH,UAAU,CAACI,IAAI,CACb9H,aAAA,CAACxC,iBAAiB;YAChBuK,GAAG,EAAEF,MAAM;YACXlJ,MAAM,EAAEuD,YAAY;YACpBtD,OAAO,EAAEkH,QAAQ,CAAC6B,QAAQ,CAAC;YAC3B9I,UAAU,EAAEA;UAAU,EACtB,CACH;UAED+I,OAAO,GAAGI,aAAa,CAACJ,OAAO,EAAErJ,OAAO,CAAC0J,UAAU,CAAC;UAEpD,KAAgB,IAAAC,EAAA,IAAO,EAAPC,SAAA,GAAAP,OAAO,EAAPM,EAAA,GAAAC,SAAA,CAAAxB,MAAO,EAAPuB,EAAA,EAAO,EAAE;YAApB,IAAInG,GAAG,GAAAoG,SAAA,CAAAD,EAAA;YACVR,UAAU,CAACI,IAAI,CACb9H,aAAA,CAAC8B,gBAAgB,EAAAxC,QAAA;cACfyI,GAAG,EAAEF,MAAM,GAAG,GAAG,GAAG9F,GAAG,CAAC2B,UAAU,CAACM,QAAQ,CAACoE,UAAU;cACtDrG,GAAG,EAAEA,GAAG;cACRe,UAAU,EAAE,KAAK;cACjBC,UAAU,EAAE,KAAK;cACjBC,eAAe,EAAE,KAAK;cACtBH,UAAU,EAAE,KAAK;cACjBb,YAAY,EAAEA,YAAY;cAC1BC,aAAa,EAAEA,aAAa;cAC5BC,YAAY,EAAEA;YAAY,GACtBmG,UAAU,CAACtG,GAAG,EAAElD,UAAU,EAAE4I,OAAO,CAAC,EACxC,CACH;;;;MAKP,OACEzH,aAAA;QAAOgB,SAAS,EAAE,gBAAgB,GAAG3C,KAAK,CAACiD,QAAQ,CAAC,OAAO;MAAC,GAC1DtB,aAAA,gBACEA,aAAA,aACEA,aAAA;QAAImB,KAAK,EAAC,KAAK;QAACE,EAAE,EAAEW;MAAY,GAAGzD,OAAO,CAAC+J,QAAQ,CAAM,EACzDtI,aAAA;QAAImB,KAAK,EAAC,KAAK;QAAA;MAAA,EAAe,EAC9BnB,aAAA;QAAImB,KAAK,EAAC,KAAK;QAACE,EAAE,EAAEY;MAAa,GAAG1D,OAAO,CAACgK,SAAS,CAAM,CACxD,CACC,EACRvI,aAAA,gBAAQ0H,UAAU,CAAS,CACrB;KAEX,CACQ;GAEd;EAED1C,QAAA,CAAA/G,SAAA,CAAAmH,iBAAiB,GAAjB,UAAkBa,UAAsB,EAAEC,YAAyB,EAAEH,SAAsB;IACzF,OAAO,IAAI,CAACyC,iBAAiB,CAC3BC,eAAe,CACbxC,UAAU,EACVC,YAAY,EACZ,IAAI,CAACxH,KAAK,CAACmH,WAAW,CAAC6C,WAAW,EAClC,IAAI,CAACtK,OAAO,CAACG,OAAO,CAACoK,gBAAgB,CACtC,CAACC,EAAE,EACJ7C,SAAS,CACV;GACF;EAEDf,QAAA,CAAA/G,SAAA,CAAAuK,iBAAiB,GAAjB,UAAkBK,WAA+B,EAAE9C,SAAsB;IACvE,IAAI+C,IAAI,GAAG,EAAE;IAEb,KAAuB,IAAAZ,EAAA,IAAW,EAAXa,aAAA,GAAAF,WAAW,EAAXX,EAAA,GAAAa,aAAA,CAAApC,MAAW,EAAXuB,EAAA,EAAW,EAAE;MAA/B,IAAIxE,UAAU,GAAAqF,aAAA,CAAAb,EAAA;MACjBY,IAAI,CAAChB,IAAI,CAAAlK,KAAA,CAATkL,IAAI,EAAS,IAAI,CAACE,gBAAgB,CAACtF,UAAU,EAAEqC,SAAS,CAAC;;IAG3D,OAAO+C,IAAI;GACZ;EAED9D,QAAA,CAAA/G,SAAA,CAAA+K,gBAAgB,GAAhB,UAAiBtF,UAA4B,EAAEqC,SAAsB;IAC7D,IAAAzH,OAAO,GAAK,IAAI,CAACF,OAAO,CAAAE,OAAjB;IACP,IAAAqK,gBAAgB,GAAK,IAAI,CAACvK,OAAO,CAACG,OAAO,CAAAoK,gBAAzB;IACtB,IAAIvE,KAAK,GAAGV,UAAU,CAACU,KAAK;IAC5B,IAAIF,MAAM,GAAGR,UAAU,CAACC,GAAG,CAACO,MAAM;IAClC,IAAIyD,QAAQ;IACZ,IAAIsB,QAAQ;IACZ,IAAIlH,GAAG;IACP,IAAI+G,IAAI,GAAG,EAAE;IAEb,KAAKnB,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG5B,SAAS,CAACY,MAAM,EAAEgB,QAAQ,IAAI,CAAC,EAAE;MAC7DsB,QAAQ,GAAGC,eAAe,CAAC9E,KAAK,EAAE2B,SAAS,CAAC4B,QAAQ,CAAC,CAAC;MAEtD,IAAIsB,QAAQ,EAAE;QACZlH,GAAG,GAAG;UACJoH,SAAS,EAAE,IAAI;UACfzF,UAAU,EAAAA,UAAA;UACVa,KAAK,EAAE0E,QAAQ,CAAC1E,KAAK;UACrBC,GAAG,EAAEyE,QAAQ,CAACzE,GAAG;UACjBH,OAAO,EAAEX,UAAU,CAACW,OAAO,IAAI4E,QAAQ,CAAC1E,KAAK,CAAC6E,OAAO,EAAE,KAAKhF,KAAK,CAACG,KAAK,CAAC6E,OAAO,EAAE;UACjF3E,KAAK,EAAEf,UAAU,CAACe,KAAK,IAAIwE,QAAQ,CAACzE,GAAG,CAAC4E,OAAO,EAAE,KAAKhF,KAAK,CAACI,GAAG,CAAC4E,OAAO,EAAE;UACzEzB,QAAQ,EAAAA;SACT;QAEDmB,IAAI,CAAChB,IAAI,CAAC/F,GAAG,CAAC;;;QAId,IACE,CAACA,GAAG,CAAC0C,KAAK,IAAI,CAACP,MAAM,IACrByD,QAAQ,GAAG,CAAC,GAAG5B,SAAS,CAACY,MAAM,IAC/BvC,KAAK,CAACI,GAAG,GACPlG,OAAO,CAAC+K,GAAG,CACTtD,SAAS,CAAC4B,QAAQ,GAAG,CAAC,CAAC,CAACpD,KAAK,EAC7BoE,gBAAgB,CACjB,EACH;UACA5G,GAAG,CAACyC,GAAG,GAAGJ,KAAK,CAACI,GAAG;UACnBzC,GAAG,CAAC0C,KAAK,GAAG,IAAI;UAChB;;;;IAKN,OAAOqE,IAAI;GACZ;EACH,OAAA9D,QAAC;AAAD,CAlNA,CAA8BsE,aAAa;AAoN3C,SAASrC,mBAAmBA,CAAC5H,SAAS;EACpC,OAAOA,SAAS,CAACL,IAAI;AACvB;AAEA,SAASiG,eAAeA,CAACY,WAAwB;EAC/C,IAAI0D,QAAQ,GAAGC,UAAU,CAAC3D,WAAW,CAAC4D,WAAW,CAAClF,KAAK,CAAC;EACxD,IAAImF,OAAO,GAAG7D,WAAW,CAAC4D,WAAW,CAACjF,GAAG;EACzC,IAAIsB,QAAQ,GAAiB,EAAE;EAC/B,IAAIC,SAAS,GAAgB,EAAE;EAE/B,OAAOwD,QAAQ,GAAGG,OAAO,EAAE;IACzB5D,QAAQ,CAACgC,IAAI,CAACyB,QAAQ,CAAC;IAEvBxD,SAAS,CAAC+B,IAAI,CAAC;MACbvD,KAAK,EAAEgF,QAAQ;MACf/E,GAAG,EAAEmF,OAAO,CAACJ,QAAQ,EAAE,CAAC;KACzB,CAAC;IAEFA,QAAQ,GAAGI,OAAO,CAACJ,QAAQ,EAAE,CAAC,CAAC;;EAGjC,OAAO;IAAEzD,QAAQ,EAAAA,QAAA;IAAEC,SAAS,EAAAA;EAAA,CAAE;AAChC;AAEA;AACA,SAASuB,cAAcA,CAACwB,IAAI;EAC1B,IAAIzB,SAAS,GAAG,EAAE;EAClB,IAAIuC,CAAC;EACL,IAAI7H,GAAG;EAEP,KAAK6H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,IAAI,CAACnC,MAAM,EAAEiD,CAAC,IAAI,CAAC,EAAE;IACnC7H,GAAG,GAAG+G,IAAI,CAACc,CAAC,CAAC;IACb,CAACvC,SAAS,CAACtF,GAAG,CAAC4F,QAAQ,CAAC,KAAKN,SAAS,CAACtF,GAAG,CAAC4F,QAAQ,CAAC,GAAG,EAAE,CAAC,EACvDG,IAAI,CAAC/F,GAAG,CAAC;;EAGd,OAAOsF,SAAS;AAClB;ACjRO,IAAMwC,eAAe,GAAG;EAC7B5K,aAAa,EAAE6K,uBAAuB;EACtC1K,iBAAiB,EAAE0K,uBAAuB;EAE1C/C,kBAAkB,EAAEgD,QAA6D;EACjF/C,eAAe,EAAE+C,QAAgE;EACjF7C,gBAAgB,EAAE6C,QAAuD;EACzE5C,mBAAmB,EAAE4C;;CAGtB;AAED,SAASD,uBAAuBA,CAACE,KAA6B;EAC5D,OAAOA,KAAK,KAAK,KAAK,GAAG,IAAI,GAAGtI,eAAe,CAACsI,KAAK,CAAC;AACxD;ACtBA,IAAAC,IAAA,GAAeC,YAAY,CAAC;EAC1BC,cAAc,EAAEN,eAAe;EAC/BO,KAAK,EAAE;IAELC,IAAI,EAAE;MACJlB,SAAS,EAAEnE,QAAQ;MACnBsF,aAAa,EAAE,MAAM;MACrBrL,aAAa,EAAE;QAAEsL,KAAK,EAAE,MAAM;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS,CAAE;KAClE;IAEDC,OAAO,EAAE;MACPC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEC,IAAI,EAAE;MAAC,CAAE;MACrB5L,aAAa,EAAE;QAAE6L,OAAO,EAAE;MAAM,CAAE;KACnC;IAEDC,QAAQ,EAAE;MACRJ,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEI,KAAK,EAAE;MAAC,CAAE;MACtB/L,aAAa,EAAE;QAAE6L,OAAO,EAAE;MAAM,CAAE;MAClC1L,iBAAiB,EAAE;QAAEmL,KAAK,EAAE,MAAM;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAS;KACpE;IAEDQ,SAAS,EAAE;MACTN,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEL,KAAK,EAAE;MAAC,CAAE;MACtBnL,iBAAiB,EAAE;QAAE0L,OAAO,EAAE;MAAM,CAAE;KACvC;IAEDI,QAAQ,EAAE;MACRP,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEH,IAAI,EAAE;MAAC,CAAE;MACrBrL,iBAAiB,EAAE;QAAE0L,OAAO,EAAE;MAAM,CAAE;;;CAI3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}