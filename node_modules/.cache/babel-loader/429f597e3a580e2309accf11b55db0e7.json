{"ast":null,"code":"var _jsxFileName = \"E:\\\\EXAI\\\\EX-AI\\\\src\\\\views\\\\extensions\\\\drag-and-drop\\\\DndClone.js\",\n  _s = $RefreshSig$();\n// ** React Imports\nimport { useState } from 'react';\n\n// ** Third Party Components\nimport classnames from 'classnames';\nimport { ReactSortable } from 'react-sortablejs';\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL';\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Row, Col, Badge } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DndClone = () => {\n  _s();\n  // ** State\n  const [isRtl] = useRTL();\n  const source1 = [{\n    text: 'Youtube',\n    color: 'light-secondary'\n  }, {\n    text: 'Facebook',\n    color: 'light-primary'\n  }, {\n    text: 'Google',\n    color: 'light-success'\n  }, {\n    text: 'Instagram',\n    color: 'light-danger'\n  }, {\n    text: 'Twitter',\n    color: 'light-info'\n  }, {\n    text: 'Discord',\n    color: 'light-warning'\n  }];\n  const source2 = [{\n    text: 'Github',\n    color: 'light-secondary'\n  }, {\n    text: 'Gitlab',\n    color: 'light-primary'\n  }, {\n    text: 'Slack',\n    color: 'light-success'\n  }, {\n    text: 'Pinterest',\n    color: 'light-danger'\n  }, {\n    text: 'Tinder',\n    color: 'light-info'\n  }, {\n    text: 'Amazon',\n    color: 'light-warning'\n  }];\n  const [list, setList] = useState(source1);\n  const [list2, setList2] = useState(source2);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CardTitle, {\n        tag: \"h4\",\n        children: \"Clone List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CardText, {\n        children: [\"Add \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"pull:clone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), \" with your group prop to clone items.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          sm: \"12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"my-1\",\n            children: \"Badge Source 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReactSortable, {\n            list: list,\n            setList: setList,\n            group: {\n              name: 'shared-badge-group',\n              pull: 'clone'\n            },\n            className: classnames('demo-inline-spacing sortable', {\n              'flex-row-reverse': isRtl\n            }),\n            children: list.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Badge, {\n                className: \"draggable\",\n                color: item.color,\n                pill: true,\n                children: item.text\n              }, \"\".concat(item.text, \"-\").concat(index), false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          sm: \"12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"my-1\",\n            children: \"Badge Source 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReactSortable, {\n            list: list2,\n            setList: setList2,\n            group: {\n              name: 'shared-badge-group',\n              pull: 'clone'\n            },\n            className: classnames('demo-inline-spacing sortable', {\n              'flex-row-reverse': isRtl\n            }),\n            children: list2.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Badge, {\n                className: \"draggable\",\n                color: item.color,\n                pill: true,\n                children: item.text\n              }, \"\".concat(item.text, \"-\").concat(index), false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(DndClone, \"hgYcl/KIFCcBziu+0w1Vs8hJSnA=\", false, function () {\n  return [useRTL];\n});\n_c = DndClone;\nexport default DndClone;\nvar _c;\n$RefreshReg$(_c, \"DndClone\");","map":{"version":3,"names":["useState","classnames","ReactSortable","useRTL","Card","CardHeader","CardTitle","CardBody","CardText","Row","Col","Badge","jsxDEV","_jsxDEV","DndClone","_s","isRtl","source1","text","color","source2","list","setList","list2","setList2","children","tag","fileName","_jsxFileName","lineNumber","columnNumber","md","sm","className","group","name","pull","map","item","index","pill","concat","_c","$RefreshReg$"],"sources":["E:/EXAI/EX-AI/src/views/extensions/drag-and-drop/DndClone.js"],"sourcesContent":["// ** React Imports\nimport { useState } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { ReactSortable } from 'react-sortablejs'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Row, Col, Badge } from 'reactstrap'\n\nconst DndClone = () => {\n  // ** State\n  const [isRtl] = useRTL()\n\n  const source1 = [\n    {\n      text: 'Youtube',\n      color: 'light-secondary'\n    },\n    {\n      text: 'Facebook',\n      color: 'light-primary'\n    },\n    {\n      text: 'Google',\n      color: 'light-success'\n    },\n    {\n      text: 'Instagram',\n      color: 'light-danger'\n    },\n    {\n      text: 'Twitter',\n      color: 'light-info'\n    },\n    {\n      text: 'Discord',\n      color: 'light-warning'\n    }\n  ]\n  const source2 = [\n    {\n      text: 'Github',\n      color: 'light-secondary'\n    },\n    {\n      text: 'Gitlab',\n      color: 'light-primary'\n    },\n    {\n      text: 'Slack',\n      color: 'light-success'\n    },\n    {\n      text: 'Pinterest',\n      color: 'light-danger'\n    },\n    {\n      text: 'Tinder',\n      color: 'light-info'\n    },\n    {\n      text: 'Amazon',\n      color: 'light-warning'\n    }\n  ]\n\n  const [list, setList] = useState(source1)\n  const [list2, setList2] = useState(source2)\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Clone List</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <CardText>\n          Add <code>pull:clone</code> with your group prop to clone items.\n        </CardText>\n        <Row>\n          <Col md='6' sm='12'>\n            <h4 className='my-1'>Badge Source 1</h4>\n            <ReactSortable\n              list={list}\n              setList={setList}\n              group={{ name: 'shared-badge-group', pull: 'clone' }}\n              className={classnames('demo-inline-spacing sortable', {\n                'flex-row-reverse': isRtl\n              })}\n            >\n              {list.map((item, index) => {\n                return (\n                  <Badge className='draggable' key={`${item.text}-${index}`} color={item.color} pill>\n                    {item.text}\n                  </Badge>\n                )\n              })}\n            </ReactSortable>\n          </Col>\n          <Col md='6' sm='12'>\n            <h4 className='my-1'>Badge Source 2</h4>\n            <ReactSortable\n              list={list2}\n              setList={setList2}\n              group={{ name: 'shared-badge-group', pull: 'clone' }}\n              className={classnames('demo-inline-spacing sortable', {\n                'flex-row-reverse': isRtl\n              })}\n            >\n              {list2.map((item, index) => {\n                return (\n                  <Badge className='draggable' key={`${item.text}-${index}`} color={item.color} pill>\n                    {item.text}\n                  </Badge>\n                )\n              })}\n            </ReactSortable>\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default DndClone\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}