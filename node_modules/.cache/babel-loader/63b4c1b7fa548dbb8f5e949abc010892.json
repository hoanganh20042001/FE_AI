{"ast":null,"code":"// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// ** Axios Imports\nimport axios from 'axios';\nexport const getBookmarks = createAsyncThunk('layout/getBookmarks', async () => {\n  const response = await axios.get('/api/bookmarks/data');\n  return {\n    data: response.data.suggestions,\n    bookmarks: response.data.bookmarks\n  };\n});\nexport const updateBookmarked = createAsyncThunk('layout/updateBookmarked', async id => {\n  await axios.post('/api/bookmarks/update', {\n    id\n  });\n  return id;\n});\nexport const layoutSlice = createSlice({\n  name: 'layout',\n  initialState: {\n    query: '',\n    bookmarks: [],\n    suggestions: []\n  },\n  reducers: {\n    handleSearchQuery: (state, action) => {\n      state.query = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getBookmarks.fulfilled, (state, action) => {\n      state.suggestions = action.payload.data;\n      state.bookmarks = action.payload.bookmarks;\n    }).addCase(updateBookmarked.fulfilled, (state, action) => {\n      let objectToUpdate;\n\n      // ** find & update object\n      state.suggestions.find(item => {\n        if (item.id === action.payload) {\n          item.isBookmarked = !item.isBookmarked;\n          objectToUpdate = item;\n        }\n      });\n\n      // ** Get index to add or remove bookmark from array\n      const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.payload);\n      if (bookmarkIndex === -1) {\n        state.bookmarks.push(objectToUpdate);\n      } else {\n        state.bookmarks.splice(bookmarkIndex, 1);\n      }\n    });\n  }\n});\nexport const {\n  handleSearchQuery\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","getBookmarks","response","get","data","suggestions","bookmarks","updateBookmarked","id","post","layoutSlice","name","initialState","query","reducers","handleSearchQuery","state","action","payload","extraReducers","builder","addCase","fulfilled","objectToUpdate","find","item","isBookmarked","bookmarkIndex","findIndex","x","push","splice","actions","reducer"],"sources":["C:/Users/Hai Hong/Desktop/EXAI/EXAI/src/redux/reducers/navbar.js"],"sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\n// ** Axios Imports\r\nimport axios from 'axios'\r\n\r\nexport const getBookmarks = createAsyncThunk('layout/getBookmarks', async () => {\r\n  const response = await axios.get('/api/bookmarks/data')\r\n  return {\r\n    data: response.data.suggestions,\r\n    bookmarks: response.data.bookmarks\r\n  }\r\n})\r\n\r\nexport const updateBookmarked = createAsyncThunk('layout/updateBookmarked', async id => {\r\n  await axios.post('/api/bookmarks/update', { id })\r\n  return id\r\n})\r\n\r\nexport const layoutSlice = createSlice({\r\n  name: 'layout',\r\n  initialState: {\r\n    query: '',\r\n    bookmarks: [],\r\n    suggestions: []\r\n  },\r\n  reducers: {\r\n    handleSearchQuery: (state, action) => {\r\n      state.query = action.payload\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getBookmarks.fulfilled, (state, action) => {\r\n        state.suggestions = action.payload.data\r\n        state.bookmarks = action.payload.bookmarks\r\n      })\r\n      .addCase(updateBookmarked.fulfilled, (state, action) => {\r\n        let objectToUpdate\r\n\r\n        // ** find & update object\r\n        state.suggestions.find(item => {\r\n          if (item.id === action.payload) {\r\n            item.isBookmarked = !item.isBookmarked\r\n            objectToUpdate = item\r\n          }\r\n        })\r\n\r\n        // ** Get index to add or remove bookmark from array\r\n        const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.payload)\r\n\r\n        if (bookmarkIndex === -1) {\r\n          state.bookmarks.push(objectToUpdate)\r\n        } else {\r\n          state.bookmarks.splice(bookmarkIndex, 1)\r\n        }\r\n      })\r\n  }\r\n})\r\n\r\nexport const { handleSearchQuery } = layoutSlice.actions\r\n\r\nexport default layoutSlice.reducer\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAAC,qBAAqB,EAAE,YAAY;EAC9E,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,qBAAqB,CAAC;EACvD,OAAO;IACLC,IAAI,EAAEF,QAAQ,CAACE,IAAI,CAACC,WAAW;IAC/BC,SAAS,EAAEJ,QAAQ,CAACE,IAAI,CAACE;EAC3B,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAGR,gBAAgB,CAAC,yBAAyB,EAAE,MAAMS,EAAE,IAAI;EACtF,MAAMR,KAAK,CAACS,IAAI,CAAC,uBAAuB,EAAE;IAAED;EAAG,CAAC,CAAC;EACjD,OAAOA,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,WAAW,GAAGZ,WAAW,CAAC;EACrCa,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTP,SAAS,EAAE,EAAE;IACbD,WAAW,EAAE;EACf,CAAC;EACDS,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO;IAC9B;EACF,CAAC;EACDC,aAAa,EAAEC,OAAO,IAAI;IACxBA,OAAO,CACJC,OAAO,CAACpB,YAAY,CAACqB,SAAS,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACX,WAAW,GAAGY,MAAM,CAACC,OAAO,CAACd,IAAI;MACvCY,KAAK,CAACV,SAAS,GAAGW,MAAM,CAACC,OAAO,CAACZ,SAAS;IAC5C,CAAC,CAAC,CACDe,OAAO,CAACd,gBAAgB,CAACe,SAAS,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MACtD,IAAIM,cAAc;;MAElB;MACAP,KAAK,CAACX,WAAW,CAACmB,IAAI,CAACC,IAAI,IAAI;QAC7B,IAAIA,IAAI,CAACjB,EAAE,KAAKS,MAAM,CAACC,OAAO,EAAE;UAC9BO,IAAI,CAACC,YAAY,GAAG,CAACD,IAAI,CAACC,YAAY;UACtCH,cAAc,GAAGE,IAAI;QACvB;MACF,CAAC,CAAC;;MAEF;MACA,MAAME,aAAa,GAAGX,KAAK,CAACV,SAAS,CAACsB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACrB,EAAE,KAAKS,MAAM,CAACC,OAAO,CAAC;MAE7E,IAAIS,aAAa,KAAK,CAAC,CAAC,EAAE;QACxBX,KAAK,CAACV,SAAS,CAACwB,IAAI,CAACP,cAAc,CAAC;MACtC,CAAC,MAAM;QACLP,KAAK,CAACV,SAAS,CAACyB,MAAM,CAACJ,aAAa,EAAE,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEZ;AAAkB,CAAC,GAAGL,WAAW,CAACsB,OAAO;AAExD,eAAetB,WAAW,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}