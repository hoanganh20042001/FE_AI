{"ast":null,"code":"import { createTranslatorFactory as r, ITSELF as t } from \"@ucast/core\";\nexport * from \"@ucast/core\";\nimport { MongoQueryParser as o, allParsingInstructions as n, defaultParsers as e } from \"@ucast/mongo\";\nexport * from \"@ucast/mongo\";\nimport { createJsInterpreter as f, allInterpreters as i, compare as u } from \"@ucast/js\";\nexport * from \"@ucast/js\";\nfunction c() {\n  return (c = Object.assign || function (r) {\n    for (var t = 1; t < arguments.length; t++) {\n      var o = arguments[t];\n      for (var n in o) Object.prototype.hasOwnProperty.call(o, n) && (r[n] = o[n]);\n    }\n    return r;\n  }).apply(this, arguments);\n}\nfunction a(r) {\n  return r instanceof Date ? r.getTime() : r && \"function\" == typeof r.toJSON ? r.toJSON() : r;\n}\nvar m = function (r, t) {\n  return u(a(r), a(t));\n};\nfunction p(n, e, i) {\n  var u = new o(n),\n    a = f(e, c({\n      compare: m\n    }, i));\n  if (i && i.forPrimitives) {\n    var p = {\n        field: t\n      },\n      s = u.parse;\n    u.setParse(function (r) {\n      return s(r, p);\n    });\n  }\n  return r(u.parse, a);\n}\nvar s = p(n, i),\n  v = p([\"$and\", \"$or\"].reduce(function (r, t) {\n    return r[t] = c({}, r[t], {\n      type: \"field\"\n    }), r;\n  }, c({}, n, {\n    $nor: c({}, n.$nor, {\n      type: \"field\",\n      parse: e.compound\n    })\n  })), i, {\n    forPrimitives: !0\n  }),\n  d = s;\nexport { p as createFactory, d as filter, s as guard, v as squire };","map":{"version":3,"names":["a","r","Date","getTime","toJSON","m","comparePrimitives","t","u","p","n","e","i","o","f","c","compare","forPrimitives","field","s","parse","setParse","v","reduce","type","$nor","compound","d","createFactory","filter","guard","squire"],"sources":["../../src/factory.ts"],"sourcesContent":["import { createTranslatorFactory, ParsingInstruction, Condition, ITSELF } from '@ucast/core';\nimport {\n  MongoQuery,\n  MongoQueryParser,\n  MongoQueryFieldOperators,\n  allParsingInstructions,\n  defaultParsers\n} from '@ucast/mongo';\nimport {\n  createJsInterpreter,\n  allInterpreters,\n  JsInterpreter,\n  JsInterpretationOptions,\n  compare\n} from '@ucast/js';\n\ntype ThingFilter<T> = {\n  (object: T): boolean\n  ast: Condition\n};\n\ninterface HasToJSON {\n  toJSON(): unknown\n}\n\nfunction toPrimitive(value: unknown) {\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n\n  if (value && typeof (value as HasToJSON).toJSON === 'function') {\n    return (value as HasToJSON).toJSON();\n  }\n\n  return value;\n}\n\nconst comparePrimitives: typeof compare = (a, b) => compare(toPrimitive(a), toPrimitive(b));\n\nexport interface FactoryOptions extends JsInterpretationOptions {\n  forPrimitives: boolean\n}\n\nexport type Filter = <\n  T = Record<string, unknown>,\n  Q extends MongoQuery<T> = MongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\nexport type PrimitiveMongoQuery<T> = MongoQueryFieldOperators<T> & Partial<{\n  $and: MongoQueryFieldOperators<T>[],\n  $or: MongoQueryFieldOperators<T>[],\n  $nor: MongoQueryFieldOperators<T>[]\n}>;\nexport type PrimitiveFilter = <\n  T,\n  Q extends PrimitiveMongoQuery<T> = PrimitiveMongoQuery<T>\n>(query: Q) => ThingFilter<T>;\n\ntype FilterType<T extends { forPrimitives?: true }> = T['forPrimitives'] extends true\n  ? PrimitiveFilter\n  : Filter;\n\nexport function createFactory<\n  T extends Record<string, ParsingInstruction<any, any>>,\n  I extends Record<string, JsInterpreter<any>>,\n  P extends { forPrimitives?: true }\n>(instructions: T, interpreters: I, options?: Partial<FactoryOptions> & P): FilterType<P> {\n  const parser = new MongoQueryParser(instructions);\n  const interpret = createJsInterpreter(interpreters, {\n    compare: comparePrimitives,\n    ...options\n  });\n\n  if (options && options.forPrimitives) {\n    const params = { field: ITSELF };\n    const parse = parser.parse;\n    parser.setParse(query => parse(query, params));\n  }\n\n  return createTranslatorFactory(parser.parse, interpret) as any;\n}\n\nexport const guard = createFactory(allParsingInstructions, allInterpreters);\n\nconst compoundOperators = ['$and', '$or'] as const;\nconst allPrimitiveParsingInstructions = compoundOperators.reduce((instructions, name) => {\n  instructions[name] = { ...instructions[name], type: 'field' } as any;\n  return instructions;\n}, {\n  ...allParsingInstructions,\n  $nor: {\n    ...allParsingInstructions.$nor,\n    type: 'field',\n    parse: defaultParsers.compound\n  }\n});\n\nexport const squire = createFactory(allPrimitiveParsingInstructions, allInterpreters, {\n  forPrimitives: true\n});\nexport const filter = guard; // TODO: remove in next major version\n"],"mappings":";;;;;;;;;;;;;;;AAyBA,SAASA,EAAYC,CAAA;EAAA,OACfA,CAAA,YAAiBC,IAAA,GACZD,CAAA,CAAME,OAAA,KAGXF,CAAA,IAAgD,qBAA/BA,CAAA,CAAoBG,MAAA,GAC/BH,CAAA,CAAoBG,MAAA,KAGvBH,CAAA;AAAA;AAGT,IAAMI,CAAA,GAAoC,SAAAC,CAACL,CAAA,EAAGM,CAAA;EAAA,OAAMC,CAAA,CAAQR,CAAA,CAAYC,CAAA,GAAID,CAAA,CAAYO,CAAA;AAAA;AAyBjF,SAASE,EAIdC,CAAA,EAAiBC,CAAA,EAAiBC,CAAA;EAAA,IAC5BJ,CAAA,GAAS,IAAIK,CAAA,CAAiBH,CAAA;IAC9BV,CAAA,GAAYc,CAAA,CAAoBH,CAAA,EAAAI,CAAA;MACpCC,OAAA,EAASX;IAAA,GACNO,CAAA;EAAA,IAGDA,CAAA,IAAWA,CAAA,CAAQK,aAAA,EAAe;IAAA,IAC9BR,CAAA,GAAS;QAAES,KAAA,EAAOX;MAAA;MAClBY,CAAA,GAAQX,CAAA,CAAOY,KAAA;IACrBZ,CAAA,CAAOa,QAAA,CAAS,UAAApB,CAAA;MAAA,OAASkB,CAAA,CAAMlB,CAAA,EAAOQ,CAAA;IAAA;EAAA;EAAA,OAGjCR,CAAA,CAAwBO,CAAA,CAAOY,KAAA,EAAOpB,CAAA;AAAA;AAAA,IAGlCmB,CAAA,GAAQV,CAAA,CAAcC,CAAA,EAAwBE,CAAA;EAe9CU,CAAA,GAASb,CAAA,CAbI,CAAC,QAAQ,OACuBc,MAAA,CAAO,UAACtB,CAAA,EAAcM,CAAA;IAAA,OAC9EN,CAAA,CAAaM,CAAA,IAAAQ,CAAA,KAAad,CAAA,CAAaM,CAAA;MAAOiB,IAAA,EAAM;IAAA,IAC7CvB,CAAA;EAAA,GAAAc,CAAA,KAEJL,CAAA;IACHe,IAAA,EAAAV,CAAA,KACKL,CAAA,CAAuBe,IAAA;MAC1BD,IAAA,EAAM;MACNJ,KAAA,EAAOT,CAAA,CAAee;IAAA;EAAA,KAI2Cd,CAAA,EAAiB;IACpFK,aAAA,GAAe;EAAA;EAEJU,CAAA,GAASR,CAAA;AAAA,SAAAV,CAAA,IAAAmB,aAAA,EAAAD,CAAA,IAAAE,MAAA,EAAAV,CAAA,IAAAW,KAAA,EAAAR,CAAA,IAAAS,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}