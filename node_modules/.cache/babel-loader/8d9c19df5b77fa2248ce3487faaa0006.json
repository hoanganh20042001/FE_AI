{"ast":null,"code":"var _jsxFileName = \"E:\\\\EXAI\\\\EX-AI\\\\src\\\\@core\\\\components\\\\card-actions\\\\index.js\",\n  _s = $RefreshSig$();\n// ** React Imports\nimport { Fragment, useState, useEffect } from 'react';\n\n// ** Third Party Components\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UiLoader from '@components/ui-loader';\nimport { ChevronDown, RotateCw, X } from 'react-feather';\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardActions = props => {\n  _s();\n  // ** Props\n  const {\n    title,\n    actions,\n    children,\n    collapseIcon,\n    reloadIcon,\n    removeIcon,\n    endReload\n  } = props;\n\n  // ** States\n  const [reload, setReload] = useState(false);\n  const [collapse, setCollapse] = useState(true);\n  const [visibility, setVisibility] = useState(true);\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  };\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse);\n      case 'remove':\n        return setVisibility(false);\n      case 'reload':\n        return setReload(true);\n      default:\n    }\n  };\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          className: classnames('cursor-pointer', {\n            'me-50': i < actions.length - 1\n          }),\n          size: 15,\n          onClick: () => callAction(action)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      const Tag = Icons[actions];\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        className: \"cursor-pointer\",\n        size: 15,\n        onClick: () => callAction(actions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false);\n  };\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload);\n    }\n  });\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment;\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment;\n  return /*#__PURE__*/_jsxDEV(BlockUiWrapper\n  /*eslint-disable */, {\n    ...(actions === 'reload' || actions.includes('reload') ? {\n      blocking: reload\n    } : {}),\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classnames('card-action', {\n        'd-none': !visibility\n      }),\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h4\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-icons\",\n          children: renderIcons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CollapseWrapper, {\n        ...(actions === 'collapse' || actions.includes('collapse') ? {\n          isOpen: collapse\n        } : {}),\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(CardActions, \"H34FB3UQW6V15UpRvUt3rdzmeXw=\");\n_c = CardActions;\nexport default CardActions;\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (props['actions'] === 'reload' && props['endReload'] === undefined || props['actions'].includes('reload') && props['endReload'] === undefined) {\n      return new Error('Please provide a function to end reload!');\n    }\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"CardActions\");","map":{"version":3,"names":["Fragment","useState","useEffect","PropTypes","classnames","UiLoader","ChevronDown","RotateCw","X","Card","CardHeader","CardTitle","Collapse","jsxDEV","_jsxDEV","CardActions","props","_s","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","remove","callAction","action","renderIcons","Array","isArray","map","i","Tag","className","length","size","onClick","fileName","_jsxFileName","lineNumber","columnNumber","removeReload","CollapseWrapper","includes","BlockUiWrapper","blocking","tag","isOpen","_c","propTypes","any","string","isRequired","oneOfType","arrayOf","undefined","Error","$RefreshReg$"],"sources":["E:/EXAI/EX-AI/src/@core/components/card-actions/index.js"],"sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}