{"ast":null,"code":"import { optimizedCompoundCondition as e, FieldCondition as t, CompoundCondition as r, ITSELF as n, NULL_CONDITION as o, buildAnd as a, ObjectQueryParser as i } from \"@ucast/core\";\nexport { defaultInstructionParsers as defaultParsers } from \"@ucast/core\";\nfunction f(e, t) {\n  if (!Array.isArray(t)) throw new Error('\"' + e.name + '\" expects value to be an array');\n}\nfunction u(e, t) {\n  if (f(e, t), !t.length) throw new Error('\"' + e.name + '\" expects to have at least one element in array');\n}\nvar c = function (e) {\n    return function (t, r) {\n      if (typeof r !== e) throw new Error('\"' + t.name + '\" expects value to be a \"' + e + '\"');\n    };\n  },\n  p = {\n    type: \"compound\",\n    validate: u,\n    parse: function (t, r, n) {\n      var o = n.parse,\n        a = r.map(function (e) {\n          return o(e);\n        });\n      return e(t.name, a);\n    }\n  },\n  s = p,\n  l = {\n    type: \"compound\",\n    validate: u\n  },\n  d = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(t && (t instanceof RegExp || t.constructor === Object))) throw new Error('\"' + e.name + '\" expects to receive either regular expression or object of field operators');\n    },\n    parse: function (e, n, o) {\n      var a = n instanceof RegExp ? new t(\"regex\", o.field, n) : o.parse(n, o);\n      return new r(e.name, [a]);\n    }\n  },\n  v = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!t || t.constructor !== Object) throw new Error('\"' + e.name + '\" expects to receive an object with nested query or field level operators');\n    },\n    parse: function (e, r, o) {\n      var a = o.parse,\n        i = o.field,\n        f = (0, o.hasOperators)(r) ? a(r, {\n          field: n\n        }) : a(r);\n      return new t(e.name, i, f);\n    }\n  },\n  w = {\n    type: \"field\",\n    validate: c(\"number\")\n  },\n  y = {\n    type: \"field\",\n    validate: f\n  },\n  $ = y,\n  x = y,\n  h = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!Array.isArray(t) || 2 !== t.length) throw new Error('\"' + e.name + '\" expects an array with 2 numeric elements');\n    }\n  },\n  m = {\n    type: \"field\",\n    validate: c(\"boolean\")\n  },\n  g = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(\"string\" == typeof t || \"number\" == typeof t || t instanceof Date)) throw new Error('\"' + e.name + '\" expects value to be comparable (i.e., string, number or date)');\n    }\n  },\n  b = g,\n  E = b,\n  j = b,\n  O = {\n    type: \"field\"\n  },\n  R = O,\n  _ = {\n    type: \"field\",\n    validate: function (e, t) {\n      if (!(t instanceof RegExp) && \"string\" != typeof t) throw new Error('\"' + e.name + '\" expects value to be a regular expression or a string that represents regular expression');\n    },\n    parse: function (e, r, n) {\n      var o = \"string\" == typeof r ? new RegExp(r, n.query.$options || \"\") : r;\n      return new t(e.name, n.field, o);\n    }\n  },\n  q = {\n    type: \"field\",\n    parse: function () {\n      return o;\n    }\n  },\n  A = {\n    type: \"document\",\n    validate: c(\"function\")\n  },\n  N = Object.freeze({\n    __proto__: null,\n    $and: p,\n    $or: s,\n    $nor: l,\n    $not: d,\n    $elemMatch: v,\n    $size: w,\n    $in: y,\n    $nin: $,\n    $all: x,\n    $mod: h,\n    $exists: m,\n    $gte: g,\n    $gt: b,\n    $lt: E,\n    $lte: j,\n    $eq: O,\n    $ne: R,\n    $regex: _,\n    $options: q,\n    $where: A\n  });\nvar P = function (e) {\n    var t, r;\n    function n(t) {\n      return e.call(this, t, {\n        defaultOperatorName: \"$eq\",\n        operatorToConditionName: function (e) {\n          return e.slice(1);\n        }\n      }) || this;\n    }\n    return r = e, (t = n).prototype = Object.create(r.prototype), t.prototype.constructor = t, t.__proto__ = r, n.prototype.parse = function (t, r) {\n      return r && r.field ? a(this.parseFieldOperators(r.field, t)) : e.prototype.parse.call(this, t);\n    }, n;\n  }(i),\n  z = N;\nexport { x as $all, p as $and, v as $elemMatch, O as $eq, m as $exists, b as $gt, g as $gte, y as $in, E as $lt, j as $lte, h as $mod, R as $ne, $ as $nin, l as $nor, d as $not, q as $options, s as $or, _ as $regex, w as $size, A as $where, P as MongoQueryParser, z as allParsingInstructions };","map":{"version":3,"names":["f","e","t","Array","isArray","Error","name","u","length","c","ensureIs","r","p","type","validate","parse","n","o","a","map","s","l","d","RegExp","constructor","Object","field","v","i","hasOperators","w","y","$","x","h","m","g","Date","b","E","j","O","R","_","query","$options","q","A","N","freeze","__proto__","$and","$or","$nor","$not","$elemMatch","$size","$in","$nin","$all","$mod","$exists","$gte","$gt","$lt","$lte","$eq","$ne","$regex","$where","P","call","defaultOperatorName","operatorToConditionName","slice","prototype","create","parseFieldOperators","z","MongoQueryParser","allParsingInstructions"],"sources":["../../src/instructions.ts","../../src/MongoQueryParser.ts","../../src/index.ts"],"sourcesContent":["import {\n  CompoundCondition,\n  FieldCondition,\n  NamedInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n  DocumentInstruction,\n  Comparable,\n  ITSELF,\n  NULL_CONDITION,\n  FieldParsingContext,\n  optimizedCompoundCondition,\n  ObjectQueryFieldParsingContext,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nfunction ensureIsArray(instruction: NamedInstruction, value: unknown) {\n  if (!Array.isArray(value)) {\n    throw new Error(`\"${instruction.name}\" expects value to be an array`);\n  }\n}\n\nfunction ensureIsNonEmptyArray(instruction: NamedInstruction, value: unknown[]) {\n  ensureIsArray(instruction, value);\n\n  if (!value.length) {\n    throw new Error(`\"${instruction.name}\" expects to have at least one element in array`);\n  }\n}\n\nfunction ensureIsComparable(instruction: NamedInstruction, value: string | number | Date) {\n  const isComparable = typeof value === 'string' || typeof value === 'number' || value instanceof Date;\n\n  if (!isComparable) {\n    throw new Error(`\"${instruction.name}\" expects value to be comparable (i.e., string, number or date)`);\n  }\n}\n\nconst ensureIs = (type: string) => (instruction: NamedInstruction, value: unknown) => {\n  if (typeof value !== type) { // eslint-disable-line valid-typeof\n    throw new Error(`\"${instruction.name}\" expects value to be a \"${type}\"`);\n  }\n};\n\nexport const $and: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n  parse(instruction, queries, { parse }) {\n    const conditions = queries.map(query => parse(query));\n    return optimizedCompoundCondition(instruction.name, conditions);\n  }\n};\nexport const $or = $and;\nexport const $nor: CompoundInstruction<MongoQuery<any>[]> = {\n  type: 'compound',\n  validate: ensureIsNonEmptyArray,\n};\n\nexport const $not: FieldInstruction<MongoQuery<any> | RegExp> = {\n  type: 'field',\n  validate(instruction, value) {\n    const isValid = value && (value instanceof RegExp || value.constructor === Object);\n\n    if (!isValid) {\n      throw new Error(`\"${instruction.name}\" expects to receive either regular expression or object of field operators`);\n    }\n  },\n  parse(instruction, value, context) {\n    const condition = value instanceof RegExp\n      ? new FieldCondition('regex' as typeof instruction.name, context.field, value)\n      : context.parse(value, context);\n\n    return new CompoundCondition(instruction.name, [condition]);\n  },\n};\nexport const $elemMatch: FieldInstruction<MongoQuery<any>, ObjectQueryFieldParsingContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!value || value.constructor !== Object) {\n      throw new Error(`\"${instruction.name}\" expects to receive an object with nested query or field level operators`);\n    }\n  },\n  parse(instruction, value, { parse, field, hasOperators }) {\n    const condition = hasOperators(value) ? parse(value, { field: ITSELF }) : parse(value);\n    return new FieldCondition(instruction.name, field, condition);\n  }\n};\n\nexport const $size: FieldInstruction<number> = {\n  type: 'field',\n  validate: ensureIs('number')\n};\nexport const $in: FieldInstruction<unknown[]> = {\n  type: 'field',\n  validate: ensureIsArray,\n};\nexport const $nin = $in;\nexport const $all = $in;\nexport const $mod: FieldInstruction<[number, number]> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!Array.isArray(value) || value.length !== 2) {\n      throw new Error(`\"${instruction.name}\" expects an array with 2 numeric elements`);\n    }\n  }\n};\n\nexport const $exists: FieldInstruction<boolean> = {\n  type: 'field',\n  validate: ensureIs('boolean'),\n};\n\nexport const $gte: FieldInstruction<Comparable> = {\n  type: 'field',\n  validate: ensureIsComparable\n};\nexport const $gt = $gte;\nexport const $lt = $gt;\nexport const $lte = $gt;\n\nexport const $eq: FieldInstruction = {\n  type: 'field',\n};\nexport const $ne = $eq;\n\nexport interface RegExpFieldContext extends FieldParsingContext {\n  query: {\n    $options?: string\n  }\n}\n\nexport const $regex: FieldInstruction<string | RegExp, RegExpFieldContext> = {\n  type: 'field',\n  validate(instruction, value) {\n    if (!(value instanceof RegExp) && typeof value !== 'string') {\n      throw new Error(`\"${instruction.name}\" expects value to be a regular expression or a string that represents regular expression`);\n    }\n  },\n  parse(instruction, rawValue, context) {\n    const value = typeof rawValue === 'string'\n      ? new RegExp(rawValue, context.query.$options || '')\n      : rawValue;\n    return new FieldCondition(instruction.name, context.field, value);\n  }\n};\nexport const $options: FieldInstruction = {\n  type: 'field',\n  parse: () => NULL_CONDITION,\n};\n\nexport const $where: DocumentInstruction<() => boolean> = {\n  type: 'document',\n  validate: ensureIs('function'),\n};\n","import {\n  Condition,\n  buildAnd as and,\n  ParsingInstruction,\n  ObjectQueryParser,\n  FieldQueryOperators,\n} from '@ucast/core';\nimport { MongoQuery } from './types';\n\nexport interface ParseOptions {\n  field: string\n}\n\nexport class MongoQueryParser extends ObjectQueryParser<MongoQuery<any>> {\n  constructor(instructions: Record<string, ParsingInstruction>) {\n    super(instructions, {\n      defaultOperatorName: '$eq',\n      operatorToConditionName: name => name.slice(1),\n    });\n  }\n\n  parse<Q extends MongoQuery<any>, FQ extends FieldQueryOperators<Q> = FieldQueryOperators<Q>>(\n    query: Q | FQ,\n    options?: ParseOptions\n  ): Condition {\n    if (options && options.field) {\n      return and(this.parseFieldOperators(options.field, query as FQ));\n    }\n\n    return super.parse(query);\n  }\n}\n","import * as instructions from './instructions';\n\nexport const allParsingInstructions = instructions;\nexport * from './instructions';\nexport * from './MongoQueryParser';\nexport * from './types';\nexport { defaultInstructionParsers as defaultParsers } from '@ucast/core';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}