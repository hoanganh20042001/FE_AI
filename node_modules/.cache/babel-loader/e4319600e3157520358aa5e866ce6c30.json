{"ast":null,"code":"// ** Redux Imports\nimport { createSlice } from '@reduxjs/toolkit';\n\n// ** UseJWT import to get config\nimport useJwt from '@src/auth/jwt/useJwt';\nconst config = useJwt.jwtConfig;\nconst initialUser = () => {\n  const item = window.localStorage.getItem('userData');\n  //** Parse stored json or if none return initialValue\n  return item ? JSON.parse(item) : {};\n};\nexport const authSlice = createSlice({\n  name: 'authentication',\n  initialState: {\n    userData: initialUser()\n  },\n  reducers: {\n    handleLogin: (state, action) => {\n      state.userData = action.payload;\n      state[config.storageTokenKeyName] = action.payload[config.storageTokenKeyName];\n      state[config.storageRefreshTokenKeyName] = action.payload[config.storageRefreshTokenKeyName];\n      localStorage.setItem('userData', JSON.stringify(action.payload));\n      localStorage.setItem('email', action.payload.email);\n      localStorage.setItem('roleid', action.payload.roleid);\n      localStorage.setItem(config.storageTokenKeyName, action.payload.accessToken);\n      localStorage.setItem(config.storageRefreshTokenKeyName, JSON.stringify(action.payload.refreshToken));\n    },\n    handleLogout: state => {\n      state.userData = {};\n      state[config.storageTokenKeyName] = null;\n      state[config.storageRefreshTokenKeyName] = null;\n      // ** Remove user, accessToken & refreshToken from localStorage\n      localStorage.removeItem('userData');\n      localStorage.removeItem('email');\n      localStorage.removeItem('roleid');\n      localStorage.removeItem(config.storageTokenKeyName);\n      localStorage.removeItem(config.storageRefreshTokenKeyName);\n    }\n  }\n});\nexport const {\n  handleLogin,\n  handleLogout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","useJwt","config","jwtConfig","initialUser","item","window","localStorage","getItem","JSON","parse","authSlice","name","initialState","userData","reducers","handleLogin","state","action","payload","storageTokenKeyName","storageRefreshTokenKeyName","setItem","stringify","email","roleid","accessToken","refreshToken","handleLogout","removeItem","actions","reducer"],"sources":["E:/EXAI/EX-AI/src/redux/reducers/authentication.js"],"sourcesContent":["// ** Redux Imports\nimport { createSlice } from '@reduxjs/toolkit'\n\n// ** UseJWT import to get config\nimport useJwt from '@src/auth/jwt/useJwt'\n\nconst config = useJwt.jwtConfig\n\nconst initialUser = () => {\n  const item = window.localStorage.getItem('userData')\n  //** Parse stored json or if none return initialValue\n  return item ? JSON.parse(item) : {}\n}\n\nexport const authSlice = createSlice({\n  name: 'authentication',\n  initialState: {\n    userData: initialUser()\n  },\n  reducers: {\n    handleLogin: (state, action) => {\n      state.userData = action.payload\n      state[config.storageTokenKeyName] = action.payload[config.storageTokenKeyName]\n      state[config.storageRefreshTokenKeyName] = action.payload[config.storageRefreshTokenKeyName]\n      localStorage.setItem('userData', JSON.stringify(action.payload))\n      localStorage.setItem('email', action.payload.email)\n      localStorage.setItem('roleid', action.payload.roleid)\n      localStorage.setItem(config.storageTokenKeyName, action.payload.accessToken)\n      localStorage.setItem(config.storageRefreshTokenKeyName, JSON.stringify(action.payload.refreshToken))\n    },\n    handleLogout: state => {\n      state.userData = {}\n      state[config.storageTokenKeyName] = null\n      state[config.storageRefreshTokenKeyName] = null\n      // ** Remove user, accessToken & refreshToken from localStorage\n      localStorage.removeItem('userData')\n      localStorage.removeItem('email')\n      localStorage.removeItem('roleid')\n      localStorage.removeItem(config.storageTokenKeyName)\n      localStorage.removeItem(config.storageRefreshTokenKeyName)\n    }\n  }\n})\n\nexport const { handleLogin, handleLogout } = authSlice.actions\n\nexport default authSlice.reducer\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAOC,MAAM,MAAM,sBAAsB;AAEzC,MAAMC,MAAM,GAAGD,MAAM,CAACE,SAAS;AAE/B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACpD;EACA,OAAOH,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAG,CAAC,CAAC;AACrC,CAAC;AAED,OAAO,MAAMM,SAAS,GAAGX,WAAW,CAAC;EACnCY,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAE;IACZC,QAAQ,EAAEV,WAAW,CAAC;EACxB,CAAC;EACDW,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACH,QAAQ,GAAGI,MAAM,CAACC,OAAO;MAC/BF,KAAK,CAACf,MAAM,CAACkB,mBAAmB,CAAC,GAAGF,MAAM,CAACC,OAAO,CAACjB,MAAM,CAACkB,mBAAmB,CAAC;MAC9EH,KAAK,CAACf,MAAM,CAACmB,0BAA0B,CAAC,GAAGH,MAAM,CAACC,OAAO,CAACjB,MAAM,CAACmB,0BAA0B,CAAC;MAC5Fd,YAAY,CAACe,OAAO,CAAC,UAAU,EAAEb,IAAI,CAACc,SAAS,CAACL,MAAM,CAACC,OAAO,CAAC,CAAC;MAChEZ,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEJ,MAAM,CAACC,OAAO,CAACK,KAAK,CAAC;MACnDjB,YAAY,CAACe,OAAO,CAAC,QAAQ,EAAEJ,MAAM,CAACC,OAAO,CAACM,MAAM,CAAC;MACrDlB,YAAY,CAACe,OAAO,CAACpB,MAAM,CAACkB,mBAAmB,EAAEF,MAAM,CAACC,OAAO,CAACO,WAAW,CAAC;MAC5EnB,YAAY,CAACe,OAAO,CAACpB,MAAM,CAACmB,0BAA0B,EAAEZ,IAAI,CAACc,SAAS,CAACL,MAAM,CAACC,OAAO,CAACQ,YAAY,CAAC,CAAC;IACtG,CAAC;IACDC,YAAY,EAAEX,KAAK,IAAI;MACrBA,KAAK,CAACH,QAAQ,GAAG,CAAC,CAAC;MACnBG,KAAK,CAACf,MAAM,CAACkB,mBAAmB,CAAC,GAAG,IAAI;MACxCH,KAAK,CAACf,MAAM,CAACmB,0BAA0B,CAAC,GAAG,IAAI;MAC/C;MACAd,YAAY,CAACsB,UAAU,CAAC,UAAU,CAAC;MACnCtB,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;MAChCtB,YAAY,CAACsB,UAAU,CAAC,QAAQ,CAAC;MACjCtB,YAAY,CAACsB,UAAU,CAAC3B,MAAM,CAACkB,mBAAmB,CAAC;MACnDb,YAAY,CAACsB,UAAU,CAAC3B,MAAM,CAACmB,0BAA0B,CAAC;IAC5D;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,WAAW;EAAEY;AAAa,CAAC,GAAGjB,SAAS,CAACmB,OAAO;AAE9D,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}